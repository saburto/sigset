#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data.Modelo
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="sigset")]
	public partial class sigsetEntities : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArticulo(Articulo instance);
    partial void UpdateArticulo(Articulo instance);
    partial void DeleteArticulo(Articulo instance);
    partial void InsertCategoria(Categoria instance);
    partial void UpdateCategoria(Categoria instance);
    partial void DeleteCategoria(Categoria instance);
    partial void InsertCliente(Cliente instance);
    partial void UpdateCliente(Cliente instance);
    partial void DeleteCliente(Cliente instance);
    partial void InsertClienteComercial(ClienteComercial instance);
    partial void UpdateClienteComercial(ClienteComercial instance);
    partial void DeleteClienteComercial(ClienteComercial instance);
    partial void InsertClienteParticular(ClienteParticular instance);
    partial void UpdateClienteParticular(ClienteParticular instance);
    partial void DeleteClienteParticular(ClienteParticular instance);
    partial void InsertComuna(Comuna instance);
    partial void UpdateComuna(Comuna instance);
    partial void DeleteComuna(Comuna instance);
    partial void InsertContacto(Contacto instance);
    partial void UpdateContacto(Contacto instance);
    partial void DeleteContacto(Contacto instance);
    partial void InsertDetalle(Detalle instance);
    partial void UpdateDetalle(Detalle instance);
    partial void DeleteDetalle(Detalle instance);
    partial void InsertDireccion(Direccion instance);
    partial void UpdateDireccion(Direccion instance);
    partial void DeleteDireccion(Direccion instance);
    partial void InsertEspecialidade(Especialidade instance);
    partial void UpdateEspecialidade(Especialidade instance);
    partial void DeleteEspecialidade(Especialidade instance);
    partial void InsertEstado(Estado instance);
    partial void UpdateEstado(Estado instance);
    partial void DeleteEstado(Estado instance);
    partial void InsertHistorialModificacionOrden(HistorialModificacionOrden instance);
    partial void UpdateHistorialModificacionOrden(HistorialModificacionOrden instance);
    partial void DeleteHistorialModificacionOrden(HistorialModificacionOrden instance);
    partial void InsertLinea(Linea instance);
    partial void UpdateLinea(Linea instance);
    partial void DeleteLinea(Linea instance);
    partial void InsertMarca(Marca instance);
    partial void UpdateMarca(Marca instance);
    partial void DeleteMarca(Marca instance);
    partial void InsertModulo(Modulo instance);
    partial void UpdateModulo(Modulo instance);
    partial void DeleteModulo(Modulo instance);
    partial void InsertNivel(Nivel instance);
    partial void UpdateNivel(Nivel instance);
    partial void DeleteNivel(Nivel instance);
    partial void InsertOrdenTrabajo(OrdenTrabajo instance);
    partial void UpdateOrdenTrabajo(OrdenTrabajo instance);
    partial void DeleteOrdenTrabajo(OrdenTrabajo instance);
    partial void InsertPerfil(Perfil instance);
    partial void UpdatePerfil(Perfil instance);
    partial void DeletePerfil(Perfil instance);
    partial void InsertPerfilPermiso(PerfilPermiso instance);
    partial void UpdatePerfilPermiso(PerfilPermiso instance);
    partial void DeletePerfilPermiso(PerfilPermiso instance);
    partial void InsertPermiso(Permiso instance);
    partial void UpdatePermiso(Permiso instance);
    partial void DeletePermiso(Permiso instance);
    partial void InsertPorcentaje(Porcentaje instance);
    partial void UpdatePorcentaje(Porcentaje instance);
    partial void DeletePorcentaje(Porcentaje instance);
    partial void InsertPrecioGarantia(PrecioGarantia instance);
    partial void UpdatePrecioGarantia(PrecioGarantia instance);
    partial void DeletePrecioGarantia(PrecioGarantia instance);
    partial void InsertProvincia(Provincia instance);
    partial void UpdateProvincia(Provincia instance);
    partial void DeleteProvincia(Provincia instance);
    partial void InsertRegion(Region instance);
    partial void UpdateRegion(Region instance);
    partial void DeleteRegion(Region instance);
    partial void InsertTecnico(Tecnico instance);
    partial void UpdateTecnico(Tecnico instance);
    partial void DeleteTecnico(Tecnico instance);
    partial void InsertTipoArticulo(TipoArticulo instance);
    partial void UpdateTipoArticulo(TipoArticulo instance);
    partial void DeleteTipoArticulo(TipoArticulo instance);
    partial void InsertTipoCliente(TipoCliente instance);
    partial void UpdateTipoCliente(TipoCliente instance);
    partial void DeleteTipoCliente(TipoCliente instance);
    partial void InsertTipoContacto(TipoContacto instance);
    partial void UpdateTipoContacto(TipoContacto instance);
    partial void DeleteTipoContacto(TipoContacto instance);
    partial void InsertTipoDireccion(TipoDireccion instance);
    partial void UpdateTipoDireccion(TipoDireccion instance);
    partial void DeleteTipoDireccion(TipoDireccion instance);
    partial void InsertTipoEspecialidad(TipoEspecialidad instance);
    partial void UpdateTipoEspecialidad(TipoEspecialidad instance);
    partial void DeleteTipoEspecialidad(TipoEspecialidad instance);
    partial void InsertTipoOrden(TipoOrden instance);
    partial void UpdateTipoOrden(TipoOrden instance);
    partial void DeleteTipoOrden(TipoOrden instance);
    partial void InsertUsuario(Usuario instance);
    partial void UpdateUsuario(Usuario instance);
    partial void DeleteUsuario(Usuario instance);
    partial void InsertUsuarioPermiso(UsuarioPermiso instance);
    partial void UpdateUsuarioPermiso(UsuarioPermiso instance);
    partial void DeleteUsuarioPermiso(UsuarioPermiso instance);
    #endregion
		
		public sigsetEntities() : 
				base(global::Data.Properties.Settings.Default.sigsetConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public sigsetEntities(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public sigsetEntities(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public sigsetEntities(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public sigsetEntities(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Articulo> Articulos
		{
			get
			{
				return this.GetTable<Articulo>();
			}
		}
		
		public System.Data.Linq.Table<Categoria> Categorias
		{
			get
			{
				return this.GetTable<Categoria>();
			}
		}
		
		public System.Data.Linq.Table<Cliente> Clientes
		{
			get
			{
				return this.GetTable<Cliente>();
			}
		}
		
		public System.Data.Linq.Table<ClienteComercial> ClienteComercials
		{
			get
			{
				return this.GetTable<ClienteComercial>();
			}
		}
		
		public System.Data.Linq.Table<ClienteParticular> ClienteParticulars
		{
			get
			{
				return this.GetTable<ClienteParticular>();
			}
		}
		
		public System.Data.Linq.Table<Comuna> Comunas
		{
			get
			{
				return this.GetTable<Comuna>();
			}
		}
		
		public System.Data.Linq.Table<Contacto> Contactos
		{
			get
			{
				return this.GetTable<Contacto>();
			}
		}
		
		public System.Data.Linq.Table<Detalle> Detalles
		{
			get
			{
				return this.GetTable<Detalle>();
			}
		}
		
		public System.Data.Linq.Table<Direccion> Direccions
		{
			get
			{
				return this.GetTable<Direccion>();
			}
		}
		
		public System.Data.Linq.Table<Especialidade> Especialidades
		{
			get
			{
				return this.GetTable<Especialidade>();
			}
		}
		
		public System.Data.Linq.Table<Estado> Estados
		{
			get
			{
				return this.GetTable<Estado>();
			}
		}
		
		public System.Data.Linq.Table<HistorialModificacionOrden> HistorialModificacionOrdens
		{
			get
			{
				return this.GetTable<HistorialModificacionOrden>();
			}
		}
		
		public System.Data.Linq.Table<Linea> Lineas
		{
			get
			{
				return this.GetTable<Linea>();
			}
		}
		
		public System.Data.Linq.Table<Marca> Marcas
		{
			get
			{
				return this.GetTable<Marca>();
			}
		}
		
		public System.Data.Linq.Table<Modulo> Modulos
		{
			get
			{
				return this.GetTable<Modulo>();
			}
		}
		
		public System.Data.Linq.Table<Nivel> Nivels
		{
			get
			{
				return this.GetTable<Nivel>();
			}
		}
		
		public System.Data.Linq.Table<OrdenTrabajo> OrdenTrabajos
		{
			get
			{
				return this.GetTable<OrdenTrabajo>();
			}
		}
		
		public System.Data.Linq.Table<Perfil> Perfils
		{
			get
			{
				return this.GetTable<Perfil>();
			}
		}
		
		public System.Data.Linq.Table<PerfilPermiso> PerfilPermisos
		{
			get
			{
				return this.GetTable<PerfilPermiso>();
			}
		}
		
		public System.Data.Linq.Table<Permiso> Permisos
		{
			get
			{
				return this.GetTable<Permiso>();
			}
		}
		
		public System.Data.Linq.Table<Porcentaje> Porcentajes
		{
			get
			{
				return this.GetTable<Porcentaje>();
			}
		}
		
		public System.Data.Linq.Table<PrecioGarantia> PrecioGarantias
		{
			get
			{
				return this.GetTable<PrecioGarantia>();
			}
		}
		
		public System.Data.Linq.Table<Provincia> Provincias
		{
			get
			{
				return this.GetTable<Provincia>();
			}
		}
		
		public System.Data.Linq.Table<Region> Regions
		{
			get
			{
				return this.GetTable<Region>();
			}
		}
		
		public System.Data.Linq.Table<Tecnico> Tecnicos
		{
			get
			{
				return this.GetTable<Tecnico>();
			}
		}
		
		public System.Data.Linq.Table<TipoArticulo> TipoArticulos
		{
			get
			{
				return this.GetTable<TipoArticulo>();
			}
		}
		
		public System.Data.Linq.Table<TipoCliente> TipoClientes
		{
			get
			{
				return this.GetTable<TipoCliente>();
			}
		}
		
		public System.Data.Linq.Table<TipoContacto> TipoContactos
		{
			get
			{
				return this.GetTable<TipoContacto>();
			}
		}
		
		public System.Data.Linq.Table<TipoDireccion> TipoDireccions
		{
			get
			{
				return this.GetTable<TipoDireccion>();
			}
		}
		
		public System.Data.Linq.Table<TipoEspecialidad> TipoEspecialidads
		{
			get
			{
				return this.GetTable<TipoEspecialidad>();
			}
		}
		
		public System.Data.Linq.Table<TipoOrden> TipoOrdens
		{
			get
			{
				return this.GetTable<TipoOrden>();
			}
		}
		
		public System.Data.Linq.Table<Usuario> Usuarios
		{
			get
			{
				return this.GetTable<Usuario>();
			}
		}
		
		public System.Data.Linq.Table<UsuarioPermiso> UsuarioPermisos
		{
			get
			{
				return this.GetTable<UsuarioPermiso>();
			}
		}
	}
	
	[Table(Name="dbo.Articulo")]
	public partial class Articulo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _Id;
		
		private string _Modelo;
		
		private string _Observacion;
		
		private decimal _Marca;
		
		private decimal _TipoArticulo;
		
		private decimal _Categoria;
		
		private System.Nullable<decimal> _PrecioGarantia;
		
		private System.Nullable<decimal> _Linea;
		
		private EntitySet<OrdenTrabajo> _OrdenTrabajos;
		
		private EntityRef<Categoria> _Categoria1;
		
		private EntityRef<Linea> _Linea1;
		
		private EntityRef<Marca> _Marca1;
		
		private EntityRef<PrecioGarantia> _PrecioGarantia1;
		
		private EntityRef<TipoArticulo> _TipoArticulo1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(decimal value);
    partial void OnIdChanged();
    partial void OnModeloChanging(string value);
    partial void OnModeloChanged();
    partial void OnObservacionChanging(string value);
    partial void OnObservacionChanged();
    partial void OnMarcaChanging(decimal value);
    partial void OnMarcaChanged();
    partial void OnTipoArticuloChanging(decimal value);
    partial void OnTipoArticuloChanged();
    partial void OnCategoriaChanging(decimal value);
    partial void OnCategoriaChanged();
    partial void OnPrecioGarantiaChanging(System.Nullable<decimal> value);
    partial void OnPrecioGarantiaChanged();
    partial void OnLineaChanging(System.Nullable<decimal> value);
    partial void OnLineaChanged();
    #endregion
		
		public Articulo()
		{
			this._OrdenTrabajos = new EntitySet<OrdenTrabajo>(new Action<OrdenTrabajo>(this.attach_OrdenTrabajos), new Action<OrdenTrabajo>(this.detach_OrdenTrabajos));
			this._Categoria1 = default(EntityRef<Categoria>);
			this._Linea1 = default(EntityRef<Linea>);
			this._Marca1 = default(EntityRef<Marca>);
			this._PrecioGarantia1 = default(EntityRef<PrecioGarantia>);
			this._TipoArticulo1 = default(EntityRef<TipoArticulo>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Modelo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Modelo
		{
			get
			{
				return this._Modelo;
			}
			set
			{
				if ((this._Modelo != value))
				{
					this.OnModeloChanging(value);
					this.SendPropertyChanging();
					this._Modelo = value;
					this.SendPropertyChanged("Modelo");
					this.OnModeloChanged();
				}
			}
		}
		
		[Column(Storage="_Observacion", DbType="NVarChar(255)")]
		public string Observacion
		{
			get
			{
				return this._Observacion;
			}
			set
			{
				if ((this._Observacion != value))
				{
					this.OnObservacionChanging(value);
					this.SendPropertyChanging();
					this._Observacion = value;
					this.SendPropertyChanged("Observacion");
					this.OnObservacionChanged();
				}
			}
		}
		
		[Column(Storage="_Marca", DbType="Decimal(18,0) NOT NULL")]
		public decimal Marca
		{
			get
			{
				return this._Marca;
			}
			set
			{
				if ((this._Marca != value))
				{
					if (this._Marca1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMarcaChanging(value);
					this.SendPropertyChanging();
					this._Marca = value;
					this.SendPropertyChanged("Marca");
					this.OnMarcaChanged();
				}
			}
		}
		
		[Column(Storage="_TipoArticulo", DbType="Decimal(18,0) NOT NULL")]
		public decimal TipoArticulo
		{
			get
			{
				return this._TipoArticulo;
			}
			set
			{
				if ((this._TipoArticulo != value))
				{
					if (this._TipoArticulo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTipoArticuloChanging(value);
					this.SendPropertyChanging();
					this._TipoArticulo = value;
					this.SendPropertyChanged("TipoArticulo");
					this.OnTipoArticuloChanged();
				}
			}
		}
		
		[Column(Storage="_Categoria", DbType="Decimal(18,0) NOT NULL")]
		public decimal Categoria
		{
			get
			{
				return this._Categoria;
			}
			set
			{
				if ((this._Categoria != value))
				{
					if (this._Categoria1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoriaChanging(value);
					this.SendPropertyChanging();
					this._Categoria = value;
					this.SendPropertyChanged("Categoria");
					this.OnCategoriaChanged();
				}
			}
		}
		
		[Column(Storage="_PrecioGarantia", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> PrecioGarantia
		{
			get
			{
				return this._PrecioGarantia;
			}
			set
			{
				if ((this._PrecioGarantia != value))
				{
					if (this._PrecioGarantia1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrecioGarantiaChanging(value);
					this.SendPropertyChanging();
					this._PrecioGarantia = value;
					this.SendPropertyChanged("PrecioGarantia");
					this.OnPrecioGarantiaChanged();
				}
			}
		}
		
		[Column(Storage="_Linea", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Linea
		{
			get
			{
				return this._Linea;
			}
			set
			{
				if ((this._Linea != value))
				{
					if (this._Linea1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLineaChanging(value);
					this.SendPropertyChanging();
					this._Linea = value;
					this.SendPropertyChanged("Linea");
					this.OnLineaChanged();
				}
			}
		}
		
		[Association(Name="Articulo_OrdenTrabajo", Storage="_OrdenTrabajos", ThisKey="Id", OtherKey="IdArticulo")]
		public EntitySet<OrdenTrabajo> OrdenTrabajos
		{
			get
			{
				return this._OrdenTrabajos;
			}
			set
			{
				this._OrdenTrabajos.Assign(value);
			}
		}
		
		[Association(Name="Categoria_Articulo", Storage="_Categoria1", ThisKey="Categoria", OtherKey="IdCategoria", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Categoria Categoria1
		{
			get
			{
				return this._Categoria1.Entity;
			}
			set
			{
				Categoria previousValue = this._Categoria1.Entity;
				if (((previousValue != value) 
							|| (this._Categoria1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Categoria1.Entity = null;
						previousValue.Articulos.Remove(this);
					}
					this._Categoria1.Entity = value;
					if ((value != null))
					{
						value.Articulos.Add(this);
						this._Categoria = value.IdCategoria;
					}
					else
					{
						this._Categoria = default(decimal);
					}
					this.SendPropertyChanged("Categoria1");
				}
			}
		}
		
		[Association(Name="Linea_Articulo", Storage="_Linea1", ThisKey="Linea", OtherKey="IdLinea", IsForeignKey=true, DeleteRule="CASCADE")]
		public Linea Linea1
		{
			get
			{
				return this._Linea1.Entity;
			}
			set
			{
				Linea previousValue = this._Linea1.Entity;
				if (((previousValue != value) 
							|| (this._Linea1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Linea1.Entity = null;
						previousValue.Articulos.Remove(this);
					}
					this._Linea1.Entity = value;
					if ((value != null))
					{
						value.Articulos.Add(this);
						this._Linea = value.IdLinea;
					}
					else
					{
						this._Linea = default(Nullable<decimal>);
					}
					this.SendPropertyChanged("Linea1");
				}
			}
		}
		
		[Association(Name="Marca_Articulo", Storage="_Marca1", ThisKey="Marca", OtherKey="IdMarca", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Marca Marca1
		{
			get
			{
				return this._Marca1.Entity;
			}
			set
			{
				Marca previousValue = this._Marca1.Entity;
				if (((previousValue != value) 
							|| (this._Marca1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Marca1.Entity = null;
						previousValue.Articulos.Remove(this);
					}
					this._Marca1.Entity = value;
					if ((value != null))
					{
						value.Articulos.Add(this);
						this._Marca = value.IdMarca;
					}
					else
					{
						this._Marca = default(decimal);
					}
					this.SendPropertyChanged("Marca1");
				}
			}
		}
		
		[Association(Name="PrecioGarantia_Articulo", Storage="_PrecioGarantia1", ThisKey="PrecioGarantia", OtherKey="IdPrecioGarantia", IsForeignKey=true, DeleteRule="CASCADE")]
		public PrecioGarantia PrecioGarantia1
		{
			get
			{
				return this._PrecioGarantia1.Entity;
			}
			set
			{
				PrecioGarantia previousValue = this._PrecioGarantia1.Entity;
				if (((previousValue != value) 
							|| (this._PrecioGarantia1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrecioGarantia1.Entity = null;
						previousValue.Articulos.Remove(this);
					}
					this._PrecioGarantia1.Entity = value;
					if ((value != null))
					{
						value.Articulos.Add(this);
						this._PrecioGarantia = value.IdPrecioGarantia;
					}
					else
					{
						this._PrecioGarantia = default(Nullable<decimal>);
					}
					this.SendPropertyChanged("PrecioGarantia1");
				}
			}
		}
		
		[Association(Name="TipoArticulo_Articulo", Storage="_TipoArticulo1", ThisKey="TipoArticulo", OtherKey="IdTipoArticulo", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TipoArticulo TipoArticulo1
		{
			get
			{
				return this._TipoArticulo1.Entity;
			}
			set
			{
				TipoArticulo previousValue = this._TipoArticulo1.Entity;
				if (((previousValue != value) 
							|| (this._TipoArticulo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoArticulo1.Entity = null;
						previousValue.Articulos.Remove(this);
					}
					this._TipoArticulo1.Entity = value;
					if ((value != null))
					{
						value.Articulos.Add(this);
						this._TipoArticulo = value.IdTipoArticulo;
					}
					else
					{
						this._TipoArticulo = default(decimal);
					}
					this.SendPropertyChanged("TipoArticulo1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrdenTrabajos(OrdenTrabajo entity)
		{
			this.SendPropertyChanging();
			entity.Articulo = this;
		}
		
		private void detach_OrdenTrabajos(OrdenTrabajo entity)
		{
			this.SendPropertyChanging();
			entity.Articulo = null;
		}
	}
	
	[Table(Name="dbo.Categoria")]
	public partial class Categoria : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _IdCategoria;
		
		private string _Descripcion;
		
		private EntitySet<Articulo> _Articulos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCategoriaChanging(decimal value);
    partial void OnIdCategoriaChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Categoria()
		{
			this._Articulos = new EntitySet<Articulo>(new Action<Articulo>(this.attach_Articulos), new Action<Articulo>(this.detach_Articulos));
			OnCreated();
		}
		
		[Column(Storage="_IdCategoria", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal IdCategoria
		{
			get
			{
				return this._IdCategoria;
			}
			set
			{
				if ((this._IdCategoria != value))
				{
					this.OnIdCategoriaChanging(value);
					this.SendPropertyChanging();
					this._IdCategoria = value;
					this.SendPropertyChanged("IdCategoria");
					this.OnIdCategoriaChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Categoria_Articulo", Storage="_Articulos", ThisKey="IdCategoria", OtherKey="Categoria")]
		public EntitySet<Articulo> Articulos
		{
			get
			{
				return this._Articulos;
			}
			set
			{
				this._Articulos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Articulos(Articulo entity)
		{
			this.SendPropertyChanging();
			entity.Categoria1 = this;
		}
		
		private void detach_Articulos(Articulo entity)
		{
			this.SendPropertyChanging();
			entity.Categoria1 = null;
		}
	}
	
	[Table(Name="dbo.Cliente")]
	public partial class Cliente : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _TipoCliente;
		
		private string _Observacion;
		
		private System.Nullable<int> _IdDireccion;
		
		private EntityRef<ClienteComercial> _ClienteComercial;
		
		private EntityRef<ClienteParticular> _ClienteParticular;
		
		private EntitySet<Contacto> _Contactos;
		
		private EntitySet<OrdenTrabajo> _OrdenTrabajos;
		
		private EntityRef<Direccion> _Direccion;
		
		private EntityRef<TipoCliente> _TipoCliente1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTipoClienteChanging(System.Nullable<int> value);
    partial void OnTipoClienteChanged();
    partial void OnObservacionChanging(string value);
    partial void OnObservacionChanged();
    partial void OnIdDireccionChanging(System.Nullable<int> value);
    partial void OnIdDireccionChanged();
    #endregion
		
		public Cliente()
		{
			this._ClienteComercial = default(EntityRef<ClienteComercial>);
			this._ClienteParticular = default(EntityRef<ClienteParticular>);
			this._Contactos = new EntitySet<Contacto>(new Action<Contacto>(this.attach_Contactos), new Action<Contacto>(this.detach_Contactos));
			this._OrdenTrabajos = new EntitySet<OrdenTrabajo>(new Action<OrdenTrabajo>(this.attach_OrdenTrabajos), new Action<OrdenTrabajo>(this.detach_OrdenTrabajos));
			this._Direccion = default(EntityRef<Direccion>);
			this._TipoCliente1 = default(EntityRef<TipoCliente>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_TipoCliente", DbType="Int")]
		public System.Nullable<int> TipoCliente
		{
			get
			{
				return this._TipoCliente;
			}
			set
			{
				if ((this._TipoCliente != value))
				{
					if (this._TipoCliente1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTipoClienteChanging(value);
					this.SendPropertyChanging();
					this._TipoCliente = value;
					this.SendPropertyChanged("TipoCliente");
					this.OnTipoClienteChanged();
				}
			}
		}
		
		[Column(Storage="_Observacion", DbType="NVarChar(255)")]
		public string Observacion
		{
			get
			{
				return this._Observacion;
			}
			set
			{
				if ((this._Observacion != value))
				{
					this.OnObservacionChanging(value);
					this.SendPropertyChanging();
					this._Observacion = value;
					this.SendPropertyChanged("Observacion");
					this.OnObservacionChanged();
				}
			}
		}
		
		[Column(Storage="_IdDireccion", DbType="Int")]
		public System.Nullable<int> IdDireccion
		{
			get
			{
				return this._IdDireccion;
			}
			set
			{
				if ((this._IdDireccion != value))
				{
					if (this._Direccion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdDireccionChanging(value);
					this.SendPropertyChanging();
					this._IdDireccion = value;
					this.SendPropertyChanged("IdDireccion");
					this.OnIdDireccionChanged();
				}
			}
		}
		
		[Association(Name="Cliente_ClienteComercial", Storage="_ClienteComercial", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public ClienteComercial ClienteComercial
		{
			get
			{
				return this._ClienteComercial.Entity;
			}
			set
			{
				ClienteComercial previousValue = this._ClienteComercial.Entity;
				if (((previousValue != value) 
							|| (this._ClienteComercial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClienteComercial.Entity = null;
						previousValue.Cliente = null;
					}
					this._ClienteComercial.Entity = value;
					if ((value != null))
					{
						value.Cliente = this;
					}
					this.SendPropertyChanged("ClienteComercial");
				}
			}
		}
		
		[Association(Name="Cliente_ClienteParticular", Storage="_ClienteParticular", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public ClienteParticular ClienteParticular
		{
			get
			{
				return this._ClienteParticular.Entity;
			}
			set
			{
				ClienteParticular previousValue = this._ClienteParticular.Entity;
				if (((previousValue != value) 
							|| (this._ClienteParticular.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClienteParticular.Entity = null;
						previousValue.Cliente = null;
					}
					this._ClienteParticular.Entity = value;
					if ((value != null))
					{
						value.Cliente = this;
					}
					this.SendPropertyChanged("ClienteParticular");
				}
			}
		}
		
		[Association(Name="Cliente_Contacto", Storage="_Contactos", ThisKey="Id", OtherKey="IdCliente")]
		public EntitySet<Contacto> Contactos
		{
			get
			{
				return this._Contactos;
			}
			set
			{
				this._Contactos.Assign(value);
			}
		}
		
		[Association(Name="Cliente_OrdenTrabajo", Storage="_OrdenTrabajos", ThisKey="Id", OtherKey="IdCliente")]
		public EntitySet<OrdenTrabajo> OrdenTrabajos
		{
			get
			{
				return this._OrdenTrabajos;
			}
			set
			{
				this._OrdenTrabajos.Assign(value);
			}
		}
		
		[Association(Name="Direccion_Cliente", Storage="_Direccion", ThisKey="IdDireccion", OtherKey="Id", IsForeignKey=true)]
		public Direccion Direccion
		{
			get
			{
				return this._Direccion.Entity;
			}
			set
			{
				Direccion previousValue = this._Direccion.Entity;
				if (((previousValue != value) 
							|| (this._Direccion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Direccion.Entity = null;
						previousValue.Clientes.Remove(this);
					}
					this._Direccion.Entity = value;
					if ((value != null))
					{
						value.Clientes.Add(this);
						this._IdDireccion = value.Id;
					}
					else
					{
						this._IdDireccion = default(Nullable<int>);
					}
					this.SendPropertyChanged("Direccion");
				}
			}
		}
		
		[Association(Name="TipoCliente_Cliente", Storage="_TipoCliente1", ThisKey="TipoCliente", OtherKey="Id", IsForeignKey=true)]
		public TipoCliente TipoCliente1
		{
			get
			{
				return this._TipoCliente1.Entity;
			}
			set
			{
				TipoCliente previousValue = this._TipoCliente1.Entity;
				if (((previousValue != value) 
							|| (this._TipoCliente1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoCliente1.Entity = null;
						previousValue.Clientes.Remove(this);
					}
					this._TipoCliente1.Entity = value;
					if ((value != null))
					{
						value.Clientes.Add(this);
						this._TipoCliente = value.Id;
					}
					else
					{
						this._TipoCliente = default(Nullable<int>);
					}
					this.SendPropertyChanged("TipoCliente1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contactos(Contacto entity)
		{
			this.SendPropertyChanging();
			entity.Cliente = this;
		}
		
		private void detach_Contactos(Contacto entity)
		{
			this.SendPropertyChanging();
			entity.Cliente = null;
		}
		
		private void attach_OrdenTrabajos(OrdenTrabajo entity)
		{
			this.SendPropertyChanging();
			entity.Cliente = this;
		}
		
		private void detach_OrdenTrabajos(OrdenTrabajo entity)
		{
			this.SendPropertyChanging();
			entity.Cliente = null;
		}
	}
	
	[Table(Name="dbo.ClienteComercial")]
	public partial class ClienteComercial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Rut;
		
		private string _RazonSocial;
		
		private string _Sucursal;
		
		private EntityRef<Cliente> _Cliente;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRutChanging(int value);
    partial void OnRutChanged();
    partial void OnRazonSocialChanging(string value);
    partial void OnRazonSocialChanged();
    partial void OnSucursalChanging(string value);
    partial void OnSucursalChanged();
    #endregion
		
		public ClienteComercial()
		{
			this._Cliente = default(EntityRef<Cliente>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Cliente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Rut", DbType="Int NOT NULL")]
		public int Rut
		{
			get
			{
				return this._Rut;
			}
			set
			{
				if ((this._Rut != value))
				{
					this.OnRutChanging(value);
					this.SendPropertyChanging();
					this._Rut = value;
					this.SendPropertyChanged("Rut");
					this.OnRutChanged();
				}
			}
		}
		
		[Column(Storage="_RazonSocial", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string RazonSocial
		{
			get
			{
				return this._RazonSocial;
			}
			set
			{
				if ((this._RazonSocial != value))
				{
					this.OnRazonSocialChanging(value);
					this.SendPropertyChanging();
					this._RazonSocial = value;
					this.SendPropertyChanged("RazonSocial");
					this.OnRazonSocialChanged();
				}
			}
		}
		
		[Column(Storage="_Sucursal", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Sucursal
		{
			get
			{
				return this._Sucursal;
			}
			set
			{
				if ((this._Sucursal != value))
				{
					this.OnSucursalChanging(value);
					this.SendPropertyChanging();
					this._Sucursal = value;
					this.SendPropertyChanged("Sucursal");
					this.OnSucursalChanged();
				}
			}
		}
		
		[Association(Name="Cliente_ClienteComercial", Storage="_Cliente", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Cliente Cliente
		{
			get
			{
				return this._Cliente.Entity;
			}
			set
			{
				Cliente previousValue = this._Cliente.Entity;
				if (((previousValue != value) 
							|| (this._Cliente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cliente.Entity = null;
						previousValue.ClienteComercial = null;
					}
					this._Cliente.Entity = value;
					if ((value != null))
					{
						value.ClienteComercial = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Cliente");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ClienteParticular")]
	public partial class ClienteParticular : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _Rut;
		
		private string _Nombre;
		
		private string _ApellidoPaterno;
		
		private string _ApellidoMaterno;
		
		private EntityRef<Cliente> _Cliente;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRutChanging(decimal value);
    partial void OnRutChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnApellidoPaternoChanging(string value);
    partial void OnApellidoPaternoChanged();
    partial void OnApellidoMaternoChanging(string value);
    partial void OnApellidoMaternoChanged();
    #endregion
		
		public ClienteParticular()
		{
			this._Cliente = default(EntityRef<Cliente>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Cliente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Rut", DbType="Decimal(10,0) NOT NULL")]
		public decimal Rut
		{
			get
			{
				return this._Rut;
			}
			set
			{
				if ((this._Rut != value))
				{
					this.OnRutChanging(value);
					this.SendPropertyChanging();
					this._Rut = value;
					this.SendPropertyChanged("Rut");
					this.OnRutChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Column(Storage="_ApellidoPaterno", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ApellidoPaterno
		{
			get
			{
				return this._ApellidoPaterno;
			}
			set
			{
				if ((this._ApellidoPaterno != value))
				{
					this.OnApellidoPaternoChanging(value);
					this.SendPropertyChanging();
					this._ApellidoPaterno = value;
					this.SendPropertyChanged("ApellidoPaterno");
					this.OnApellidoPaternoChanged();
				}
			}
		}
		
		[Column(Storage="_ApellidoMaterno", DbType="VarChar(50)")]
		public string ApellidoMaterno
		{
			get
			{
				return this._ApellidoMaterno;
			}
			set
			{
				if ((this._ApellidoMaterno != value))
				{
					this.OnApellidoMaternoChanging(value);
					this.SendPropertyChanging();
					this._ApellidoMaterno = value;
					this.SendPropertyChanged("ApellidoMaterno");
					this.OnApellidoMaternoChanged();
				}
			}
		}
		
		[Association(Name="Cliente_ClienteParticular", Storage="_Cliente", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Cliente Cliente
		{
			get
			{
				return this._Cliente.Entity;
			}
			set
			{
				Cliente previousValue = this._Cliente.Entity;
				if (((previousValue != value) 
							|| (this._Cliente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cliente.Entity = null;
						previousValue.ClienteParticular = null;
					}
					this._Cliente.Entity = value;
					if ((value != null))
					{
						value.ClienteParticular = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Cliente");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Comuna")]
	public partial class Comuna : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _Id;
		
		private decimal _IdProvincia;
		
		private string _Nombre;
		
		private EntitySet<Direccion> _Direccions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(decimal value);
    partial void OnIdChanged();
    partial void OnIdProvinciaChanging(decimal value);
    partial void OnIdProvinciaChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public Comuna()
		{
			this._Direccions = new EntitySet<Direccion>(new Action<Direccion>(this.attach_Direccions), new Action<Direccion>(this.detach_Direccions));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Decimal(3,0) NOT NULL", IsPrimaryKey=true)]
		public decimal Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdProvincia", DbType="Decimal(3,0) NOT NULL")]
		public decimal IdProvincia
		{
			get
			{
				return this._IdProvincia;
			}
			set
			{
				if ((this._IdProvincia != value))
				{
					this.OnIdProvinciaChanging(value);
					this.SendPropertyChanging();
					this._IdProvincia = value;
					this.SendPropertyChanged("IdProvincia");
					this.OnIdProvinciaChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Association(Name="Comuna_Direccion", Storage="_Direccions", ThisKey="Id", OtherKey="Comuna")]
		public EntitySet<Direccion> Direccions
		{
			get
			{
				return this._Direccions;
			}
			set
			{
				this._Direccions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Direccions(Direccion entity)
		{
			this.SendPropertyChanging();
			entity.Comuna1 = this;
		}
		
		private void detach_Direccions(Direccion entity)
		{
			this.SendPropertyChanging();
			entity.Comuna1 = null;
		}
	}
	
	[Table(Name="dbo.Contacto")]
	public partial class Contacto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _Id;
		
		private string _ValorContacto;
		
		private System.Nullable<decimal> _TipoContacto;
		
		private System.Nullable<int> _IdCliente;
		
		private EntityRef<Cliente> _Cliente;
		
		private EntityRef<TipoContacto> _TipoContacto1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(decimal value);
    partial void OnIdChanged();
    partial void OnValorContactoChanging(string value);
    partial void OnValorContactoChanged();
    partial void OnTipoContactoChanging(System.Nullable<decimal> value);
    partial void OnTipoContactoChanged();
    partial void OnIdClienteChanging(System.Nullable<int> value);
    partial void OnIdClienteChanged();
    #endregion
		
		public Contacto()
		{
			this._Cliente = default(EntityRef<Cliente>);
			this._TipoContacto1 = default(EntityRef<TipoContacto>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ValorContacto", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ValorContacto
		{
			get
			{
				return this._ValorContacto;
			}
			set
			{
				if ((this._ValorContacto != value))
				{
					this.OnValorContactoChanging(value);
					this.SendPropertyChanging();
					this._ValorContacto = value;
					this.SendPropertyChanged("ValorContacto");
					this.OnValorContactoChanged();
				}
			}
		}
		
		[Column(Storage="_TipoContacto", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> TipoContacto
		{
			get
			{
				return this._TipoContacto;
			}
			set
			{
				if ((this._TipoContacto != value))
				{
					if (this._TipoContacto1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTipoContactoChanging(value);
					this.SendPropertyChanging();
					this._TipoContacto = value;
					this.SendPropertyChanged("TipoContacto");
					this.OnTipoContactoChanged();
				}
			}
		}
		
		[Column(Storage="_IdCliente", DbType="Int")]
		public System.Nullable<int> IdCliente
		{
			get
			{
				return this._IdCliente;
			}
			set
			{
				if ((this._IdCliente != value))
				{
					if (this._Cliente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdClienteChanging(value);
					this.SendPropertyChanging();
					this._IdCliente = value;
					this.SendPropertyChanged("IdCliente");
					this.OnIdClienteChanged();
				}
			}
		}
		
		[Association(Name="Cliente_Contacto", Storage="_Cliente", ThisKey="IdCliente", OtherKey="Id", IsForeignKey=true)]
		public Cliente Cliente
		{
			get
			{
				return this._Cliente.Entity;
			}
			set
			{
				Cliente previousValue = this._Cliente.Entity;
				if (((previousValue != value) 
							|| (this._Cliente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cliente.Entity = null;
						previousValue.Contactos.Remove(this);
					}
					this._Cliente.Entity = value;
					if ((value != null))
					{
						value.Contactos.Add(this);
						this._IdCliente = value.Id;
					}
					else
					{
						this._IdCliente = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cliente");
				}
			}
		}
		
		[Association(Name="TipoContacto_Contacto", Storage="_TipoContacto1", ThisKey="TipoContacto", OtherKey="IdTipoContacto", IsForeignKey=true, DeleteRule="CASCADE")]
		public TipoContacto TipoContacto1
		{
			get
			{
				return this._TipoContacto1.Entity;
			}
			set
			{
				TipoContacto previousValue = this._TipoContacto1.Entity;
				if (((previousValue != value) 
							|| (this._TipoContacto1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoContacto1.Entity = null;
						previousValue.Contactos.Remove(this);
					}
					this._TipoContacto1.Entity = value;
					if ((value != null))
					{
						value.Contactos.Add(this);
						this._TipoContacto = value.IdTipoContacto;
					}
					else
					{
						this._TipoContacto = default(Nullable<decimal>);
					}
					this.SendPropertyChanged("TipoContacto1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Detalle")]
	public partial class Detalle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _Id;
		
		private System.DateTime _FechaCreacion;
		
		private string _Contenido;
		
		private System.Nullable<decimal> _IdOrden;
		
		private decimal _Estado;
		
		private System.Nullable<int> _IdUsuario;
		
		private EntityRef<Estado> _Estado1;
		
		private EntityRef<OrdenTrabajo> _OrdenTrabajo;
		
		private EntityRef<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(decimal value);
    partial void OnIdChanged();
    partial void OnFechaCreacionChanging(System.DateTime value);
    partial void OnFechaCreacionChanged();
    partial void OnContenidoChanging(string value);
    partial void OnContenidoChanged();
    partial void OnIdOrdenChanging(System.Nullable<decimal> value);
    partial void OnIdOrdenChanged();
    partial void OnEstadoChanging(decimal value);
    partial void OnEstadoChanged();
    partial void OnIdUsuarioChanging(System.Nullable<int> value);
    partial void OnIdUsuarioChanged();
    #endregion
		
		public Detalle()
		{
			this._Estado1 = default(EntityRef<Estado>);
			this._OrdenTrabajo = default(EntityRef<OrdenTrabajo>);
			this._Usuario = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_FechaCreacion", DbType="DateTime NOT NULL")]
		public System.DateTime FechaCreacion
		{
			get
			{
				return this._FechaCreacion;
			}
			set
			{
				if ((this._FechaCreacion != value))
				{
					this.OnFechaCreacionChanging(value);
					this.SendPropertyChanging();
					this._FechaCreacion = value;
					this.SendPropertyChanged("FechaCreacion");
					this.OnFechaCreacionChanged();
				}
			}
		}
		
		[Column(Storage="_Contenido", DbType="VarChar(250)")]
		public string Contenido
		{
			get
			{
				return this._Contenido;
			}
			set
			{
				if ((this._Contenido != value))
				{
					this.OnContenidoChanging(value);
					this.SendPropertyChanging();
					this._Contenido = value;
					this.SendPropertyChanged("Contenido");
					this.OnContenidoChanged();
				}
			}
		}
		
		[Column(Storage="_IdOrden", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> IdOrden
		{
			get
			{
				return this._IdOrden;
			}
			set
			{
				if ((this._IdOrden != value))
				{
					if (this._OrdenTrabajo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdOrdenChanging(value);
					this.SendPropertyChanging();
					this._IdOrden = value;
					this.SendPropertyChanged("IdOrden");
					this.OnIdOrdenChanged();
				}
			}
		}
		
		[Column(Storage="_Estado", DbType="Decimal(18,0) NOT NULL")]
		public decimal Estado
		{
			get
			{
				return this._Estado;
			}
			set
			{
				if ((this._Estado != value))
				{
					if (this._Estado1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEstadoChanging(value);
					this.SendPropertyChanging();
					this._Estado = value;
					this.SendPropertyChanged("Estado");
					this.OnEstadoChanged();
				}
			}
		}
		
		[Column(Storage="_IdUsuario", DbType="Int")]
		public System.Nullable<int> IdUsuario
		{
			get
			{
				return this._IdUsuario;
			}
			set
			{
				if ((this._IdUsuario != value))
				{
					if (this._Usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUsuarioChanging(value);
					this.SendPropertyChanging();
					this._IdUsuario = value;
					this.SendPropertyChanged("IdUsuario");
					this.OnIdUsuarioChanged();
				}
			}
		}
		
		[Association(Name="Estado_Detalle", Storage="_Estado1", ThisKey="Estado", OtherKey="IdEstado", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Estado Estado1
		{
			get
			{
				return this._Estado1.Entity;
			}
			set
			{
				Estado previousValue = this._Estado1.Entity;
				if (((previousValue != value) 
							|| (this._Estado1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Estado1.Entity = null;
						previousValue.Detalles.Remove(this);
					}
					this._Estado1.Entity = value;
					if ((value != null))
					{
						value.Detalles.Add(this);
						this._Estado = value.IdEstado;
					}
					else
					{
						this._Estado = default(decimal);
					}
					this.SendPropertyChanged("Estado1");
				}
			}
		}
		
		[Association(Name="OrdenTrabajo_Detalle", Storage="_OrdenTrabajo", ThisKey="IdOrden", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public OrdenTrabajo OrdenTrabajo
		{
			get
			{
				return this._OrdenTrabajo.Entity;
			}
			set
			{
				OrdenTrabajo previousValue = this._OrdenTrabajo.Entity;
				if (((previousValue != value) 
							|| (this._OrdenTrabajo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrdenTrabajo.Entity = null;
						previousValue.Detalles.Remove(this);
					}
					this._OrdenTrabajo.Entity = value;
					if ((value != null))
					{
						value.Detalles.Add(this);
						this._IdOrden = value.Id;
					}
					else
					{
						this._IdOrden = default(Nullable<decimal>);
					}
					this.SendPropertyChanged("OrdenTrabajo");
				}
			}
		}
		
		[Association(Name="Usuario_Detalle", Storage="_Usuario", ThisKey="IdUsuario", OtherKey="Id", IsForeignKey=true)]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.Detalles.Remove(this);
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.Detalles.Add(this);
						this._IdUsuario = value.Id;
					}
					else
					{
						this._IdUsuario = default(Nullable<int>);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Direccion")]
	public partial class Direccion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _Provincia;
		
		private decimal _Comuna;
		
		private string _Calle;
		
		private string _Numero;
		
		private decimal _Region;
		
		private decimal _TipoDireccion;
		
		private EntitySet<Cliente> _Clientes;
		
		private EntityRef<Comuna> _Comuna1;
		
		private EntityRef<Provincia> _Provincia1;
		
		private EntityRef<Region> _Region1;
		
		private EntityRef<TipoDireccion> _TipoDireccion1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProvinciaChanging(decimal value);
    partial void OnProvinciaChanged();
    partial void OnComunaChanging(decimal value);
    partial void OnComunaChanged();
    partial void OnCalleChanging(string value);
    partial void OnCalleChanged();
    partial void OnNumeroChanging(string value);
    partial void OnNumeroChanged();
    partial void OnRegionChanging(decimal value);
    partial void OnRegionChanged();
    partial void OnTipoDireccionChanging(decimal value);
    partial void OnTipoDireccionChanged();
    #endregion
		
		public Direccion()
		{
			this._Clientes = new EntitySet<Cliente>(new Action<Cliente>(this.attach_Clientes), new Action<Cliente>(this.detach_Clientes));
			this._Comuna1 = default(EntityRef<Comuna>);
			this._Provincia1 = default(EntityRef<Provincia>);
			this._Region1 = default(EntityRef<Region>);
			this._TipoDireccion1 = default(EntityRef<TipoDireccion>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Provincia", DbType="Decimal(3,0) NOT NULL")]
		public decimal Provincia
		{
			get
			{
				return this._Provincia;
			}
			set
			{
				if ((this._Provincia != value))
				{
					if (this._Provincia1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProvinciaChanging(value);
					this.SendPropertyChanging();
					this._Provincia = value;
					this.SendPropertyChanged("Provincia");
					this.OnProvinciaChanged();
				}
			}
		}
		
		[Column(Storage="_Comuna", DbType="Decimal(3,0) NOT NULL")]
		public decimal Comuna
		{
			get
			{
				return this._Comuna;
			}
			set
			{
				if ((this._Comuna != value))
				{
					if (this._Comuna1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnComunaChanging(value);
					this.SendPropertyChanging();
					this._Comuna = value;
					this.SendPropertyChanged("Comuna");
					this.OnComunaChanged();
				}
			}
		}
		
		[Column(Storage="_Calle", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Calle
		{
			get
			{
				return this._Calle;
			}
			set
			{
				if ((this._Calle != value))
				{
					this.OnCalleChanging(value);
					this.SendPropertyChanging();
					this._Calle = value;
					this.SendPropertyChanged("Calle");
					this.OnCalleChanged();
				}
			}
		}
		
		[Column(Storage="_Numero", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Numero
		{
			get
			{
				return this._Numero;
			}
			set
			{
				if ((this._Numero != value))
				{
					this.OnNumeroChanging(value);
					this.SendPropertyChanging();
					this._Numero = value;
					this.SendPropertyChanged("Numero");
					this.OnNumeroChanged();
				}
			}
		}
		
		[Column(Storage="_Region", DbType="Decimal(2,0) NOT NULL")]
		public decimal Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				if ((this._Region != value))
				{
					if (this._Region1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionChanging(value);
					this.SendPropertyChanging();
					this._Region = value;
					this.SendPropertyChanged("Region");
					this.OnRegionChanged();
				}
			}
		}
		
		[Column(Storage="_TipoDireccion", DbType="Decimal(18,0) NOT NULL")]
		public decimal TipoDireccion
		{
			get
			{
				return this._TipoDireccion;
			}
			set
			{
				if ((this._TipoDireccion != value))
				{
					if (this._TipoDireccion1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTipoDireccionChanging(value);
					this.SendPropertyChanging();
					this._TipoDireccion = value;
					this.SendPropertyChanged("TipoDireccion");
					this.OnTipoDireccionChanged();
				}
			}
		}
		
		[Association(Name="Direccion_Cliente", Storage="_Clientes", ThisKey="Id", OtherKey="IdDireccion")]
		public EntitySet<Cliente> Clientes
		{
			get
			{
				return this._Clientes;
			}
			set
			{
				this._Clientes.Assign(value);
			}
		}
		
		[Association(Name="Comuna_Direccion", Storage="_Comuna1", ThisKey="Comuna", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Comuna Comuna1
		{
			get
			{
				return this._Comuna1.Entity;
			}
			set
			{
				Comuna previousValue = this._Comuna1.Entity;
				if (((previousValue != value) 
							|| (this._Comuna1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Comuna1.Entity = null;
						previousValue.Direccions.Remove(this);
					}
					this._Comuna1.Entity = value;
					if ((value != null))
					{
						value.Direccions.Add(this);
						this._Comuna = value.Id;
					}
					else
					{
						this._Comuna = default(decimal);
					}
					this.SendPropertyChanged("Comuna1");
				}
			}
		}
		
		[Association(Name="Provincia_Direccion", Storage="_Provincia1", ThisKey="Provincia", OtherKey="Id", IsForeignKey=true)]
		public Provincia Provincia1
		{
			get
			{
				return this._Provincia1.Entity;
			}
			set
			{
				Provincia previousValue = this._Provincia1.Entity;
				if (((previousValue != value) 
							|| (this._Provincia1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Provincia1.Entity = null;
						previousValue.Direccions.Remove(this);
					}
					this._Provincia1.Entity = value;
					if ((value != null))
					{
						value.Direccions.Add(this);
						this._Provincia = value.Id;
					}
					else
					{
						this._Provincia = default(decimal);
					}
					this.SendPropertyChanged("Provincia1");
				}
			}
		}
		
		[Association(Name="Region_Direccion", Storage="_Region1", ThisKey="Region", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Region Region1
		{
			get
			{
				return this._Region1.Entity;
			}
			set
			{
				Region previousValue = this._Region1.Entity;
				if (((previousValue != value) 
							|| (this._Region1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region1.Entity = null;
						previousValue.Direccions.Remove(this);
					}
					this._Region1.Entity = value;
					if ((value != null))
					{
						value.Direccions.Add(this);
						this._Region = value.Id;
					}
					else
					{
						this._Region = default(decimal);
					}
					this.SendPropertyChanged("Region1");
				}
			}
		}
		
		[Association(Name="TipoDireccion_Direccion", Storage="_TipoDireccion1", ThisKey="TipoDireccion", OtherKey="IdTipoDireccion", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TipoDireccion TipoDireccion1
		{
			get
			{
				return this._TipoDireccion1.Entity;
			}
			set
			{
				TipoDireccion previousValue = this._TipoDireccion1.Entity;
				if (((previousValue != value) 
							|| (this._TipoDireccion1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoDireccion1.Entity = null;
						previousValue.Direccions.Remove(this);
					}
					this._TipoDireccion1.Entity = value;
					if ((value != null))
					{
						value.Direccions.Add(this);
						this._TipoDireccion = value.IdTipoDireccion;
					}
					else
					{
						this._TipoDireccion = default(decimal);
					}
					this.SendPropertyChanged("TipoDireccion1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clientes(Cliente entity)
		{
			this.SendPropertyChanging();
			entity.Direccion = this;
		}
		
		private void detach_Clientes(Cliente entity)
		{
			this.SendPropertyChanging();
			entity.Direccion = null;
		}
	}
	
	[Table(Name="dbo.Especialidades")]
	public partial class Especialidade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _Id;
		
		private decimal _TipoEspecialidad;
		
		private System.Nullable<int> _IdTecnico;
		
		private EntityRef<Tecnico> _Tecnico;
		
		private EntityRef<TipoEspecialidad> _TipoEspecialidad1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(decimal value);
    partial void OnIdChanged();
    partial void OnTipoEspecialidadChanging(decimal value);
    partial void OnTipoEspecialidadChanged();
    partial void OnIdTecnicoChanging(System.Nullable<int> value);
    partial void OnIdTecnicoChanged();
    #endregion
		
		public Especialidade()
		{
			this._Tecnico = default(EntityRef<Tecnico>);
			this._TipoEspecialidad1 = default(EntityRef<TipoEspecialidad>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_TipoEspecialidad", DbType="Decimal(18,0) NOT NULL")]
		public decimal TipoEspecialidad
		{
			get
			{
				return this._TipoEspecialidad;
			}
			set
			{
				if ((this._TipoEspecialidad != value))
				{
					if (this._TipoEspecialidad1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTipoEspecialidadChanging(value);
					this.SendPropertyChanging();
					this._TipoEspecialidad = value;
					this.SendPropertyChanged("TipoEspecialidad");
					this.OnTipoEspecialidadChanged();
				}
			}
		}
		
		[Column(Storage="_IdTecnico", DbType="Int")]
		public System.Nullable<int> IdTecnico
		{
			get
			{
				return this._IdTecnico;
			}
			set
			{
				if ((this._IdTecnico != value))
				{
					if (this._Tecnico.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTecnicoChanging(value);
					this.SendPropertyChanging();
					this._IdTecnico = value;
					this.SendPropertyChanged("IdTecnico");
					this.OnIdTecnicoChanged();
				}
			}
		}
		
		[Association(Name="Tecnico_Especialidade", Storage="_Tecnico", ThisKey="IdTecnico", OtherKey="Id", IsForeignKey=true)]
		public Tecnico Tecnico
		{
			get
			{
				return this._Tecnico.Entity;
			}
			set
			{
				Tecnico previousValue = this._Tecnico.Entity;
				if (((previousValue != value) 
							|| (this._Tecnico.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tecnico.Entity = null;
						previousValue.Especialidades.Remove(this);
					}
					this._Tecnico.Entity = value;
					if ((value != null))
					{
						value.Especialidades.Add(this);
						this._IdTecnico = value.Id;
					}
					else
					{
						this._IdTecnico = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tecnico");
				}
			}
		}
		
		[Association(Name="TipoEspecialidad_Especialidade", Storage="_TipoEspecialidad1", ThisKey="TipoEspecialidad", OtherKey="IdTipoEspecialidad", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TipoEspecialidad TipoEspecialidad1
		{
			get
			{
				return this._TipoEspecialidad1.Entity;
			}
			set
			{
				TipoEspecialidad previousValue = this._TipoEspecialidad1.Entity;
				if (((previousValue != value) 
							|| (this._TipoEspecialidad1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoEspecialidad1.Entity = null;
						previousValue.Especialidades.Remove(this);
					}
					this._TipoEspecialidad1.Entity = value;
					if ((value != null))
					{
						value.Especialidades.Add(this);
						this._TipoEspecialidad = value.IdTipoEspecialidad;
					}
					else
					{
						this._TipoEspecialidad = default(decimal);
					}
					this.SendPropertyChanged("TipoEspecialidad1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Estado")]
	public partial class Estado : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _IdEstado;
		
		private string _Descripcion;
		
		private EntitySet<Detalle> _Detalles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdEstadoChanging(decimal value);
    partial void OnIdEstadoChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Estado()
		{
			this._Detalles = new EntitySet<Detalle>(new Action<Detalle>(this.attach_Detalles), new Action<Detalle>(this.detach_Detalles));
			OnCreated();
		}
		
		[Column(Storage="_IdEstado", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal IdEstado
		{
			get
			{
				return this._IdEstado;
			}
			set
			{
				if ((this._IdEstado != value))
				{
					this.OnIdEstadoChanging(value);
					this.SendPropertyChanging();
					this._IdEstado = value;
					this.SendPropertyChanged("IdEstado");
					this.OnIdEstadoChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Estado_Detalle", Storage="_Detalles", ThisKey="IdEstado", OtherKey="Estado")]
		public EntitySet<Detalle> Detalles
		{
			get
			{
				return this._Detalles;
			}
			set
			{
				this._Detalles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Detalles(Detalle entity)
		{
			this.SendPropertyChanging();
			entity.Estado1 = this;
		}
		
		private void detach_Detalles(Detalle entity)
		{
			this.SendPropertyChanging();
			entity.Estado1 = null;
		}
	}
	
	[Table(Name="dbo.HistorialModificacionOrden")]
	public partial class HistorialModificacionOrden : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _Id;
		
		private decimal _Usuario;
		
		private System.DateTime _Fecha;
		
		private string _Detalle;
		
		private System.Nullable<decimal> _IdOrden;
		
		private EntityRef<OrdenTrabajo> _OrdenTrabajo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(decimal value);
    partial void OnIdChanged();
    partial void OnUsuarioChanging(decimal value);
    partial void OnUsuarioChanged();
    partial void OnFechaChanging(System.DateTime value);
    partial void OnFechaChanged();
    partial void OnDetalleChanging(string value);
    partial void OnDetalleChanged();
    partial void OnIdOrdenChanging(System.Nullable<decimal> value);
    partial void OnIdOrdenChanged();
    #endregion
		
		public HistorialModificacionOrden()
		{
			this._OrdenTrabajo = default(EntityRef<OrdenTrabajo>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Usuario", DbType="Decimal(18,0) NOT NULL")]
		public decimal Usuario
		{
			get
			{
				return this._Usuario;
			}
			set
			{
				if ((this._Usuario != value))
				{
					this.OnUsuarioChanging(value);
					this.SendPropertyChanging();
					this._Usuario = value;
					this.SendPropertyChanged("Usuario");
					this.OnUsuarioChanged();
				}
			}
		}
		
		[Column(Storage="_Fecha", DbType="DateTime NOT NULL")]
		public System.DateTime Fecha
		{
			get
			{
				return this._Fecha;
			}
			set
			{
				if ((this._Fecha != value))
				{
					this.OnFechaChanging(value);
					this.SendPropertyChanging();
					this._Fecha = value;
					this.SendPropertyChanged("Fecha");
					this.OnFechaChanged();
				}
			}
		}
		
		[Column(Storage="_Detalle", DbType="VarChar(100)")]
		public string Detalle
		{
			get
			{
				return this._Detalle;
			}
			set
			{
				if ((this._Detalle != value))
				{
					this.OnDetalleChanging(value);
					this.SendPropertyChanging();
					this._Detalle = value;
					this.SendPropertyChanged("Detalle");
					this.OnDetalleChanged();
				}
			}
		}
		
		[Column(Storage="_IdOrden", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> IdOrden
		{
			get
			{
				return this._IdOrden;
			}
			set
			{
				if ((this._IdOrden != value))
				{
					if (this._OrdenTrabajo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdOrdenChanging(value);
					this.SendPropertyChanging();
					this._IdOrden = value;
					this.SendPropertyChanged("IdOrden");
					this.OnIdOrdenChanged();
				}
			}
		}
		
		[Association(Name="OrdenTrabajo_HistorialModificacionOrden", Storage="_OrdenTrabajo", ThisKey="IdOrden", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public OrdenTrabajo OrdenTrabajo
		{
			get
			{
				return this._OrdenTrabajo.Entity;
			}
			set
			{
				OrdenTrabajo previousValue = this._OrdenTrabajo.Entity;
				if (((previousValue != value) 
							|| (this._OrdenTrabajo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrdenTrabajo.Entity = null;
						previousValue.HistorialModificacionOrdens.Remove(this);
					}
					this._OrdenTrabajo.Entity = value;
					if ((value != null))
					{
						value.HistorialModificacionOrdens.Add(this);
						this._IdOrden = value.Id;
					}
					else
					{
						this._IdOrden = default(Nullable<decimal>);
					}
					this.SendPropertyChanged("OrdenTrabajo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Linea")]
	public partial class Linea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _IdLinea;
		
		private string _Descripcion;
		
		private EntitySet<Articulo> _Articulos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdLineaChanging(decimal value);
    partial void OnIdLineaChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Linea()
		{
			this._Articulos = new EntitySet<Articulo>(new Action<Articulo>(this.attach_Articulos), new Action<Articulo>(this.detach_Articulos));
			OnCreated();
		}
		
		[Column(Storage="_IdLinea", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal IdLinea
		{
			get
			{
				return this._IdLinea;
			}
			set
			{
				if ((this._IdLinea != value))
				{
					this.OnIdLineaChanging(value);
					this.SendPropertyChanging();
					this._IdLinea = value;
					this.SendPropertyChanged("IdLinea");
					this.OnIdLineaChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Linea_Articulo", Storage="_Articulos", ThisKey="IdLinea", OtherKey="Linea")]
		public EntitySet<Articulo> Articulos
		{
			get
			{
				return this._Articulos;
			}
			set
			{
				this._Articulos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Articulos(Articulo entity)
		{
			this.SendPropertyChanging();
			entity.Linea1 = this;
		}
		
		private void detach_Articulos(Articulo entity)
		{
			this.SendPropertyChanging();
			entity.Linea1 = null;
		}
	}
	
	[Table(Name="dbo.Marca")]
	public partial class Marca : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _IdMarca;
		
		private string _Descripcion;
		
		private EntitySet<Articulo> _Articulos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdMarcaChanging(decimal value);
    partial void OnIdMarcaChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Marca()
		{
			this._Articulos = new EntitySet<Articulo>(new Action<Articulo>(this.attach_Articulos), new Action<Articulo>(this.detach_Articulos));
			OnCreated();
		}
		
		[Column(Storage="_IdMarca", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal IdMarca
		{
			get
			{
				return this._IdMarca;
			}
			set
			{
				if ((this._IdMarca != value))
				{
					this.OnIdMarcaChanging(value);
					this.SendPropertyChanging();
					this._IdMarca = value;
					this.SendPropertyChanged("IdMarca");
					this.OnIdMarcaChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Marca_Articulo", Storage="_Articulos", ThisKey="IdMarca", OtherKey="Marca")]
		public EntitySet<Articulo> Articulos
		{
			get
			{
				return this._Articulos;
			}
			set
			{
				this._Articulos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Articulos(Articulo entity)
		{
			this.SendPropertyChanging();
			entity.Marca1 = this;
		}
		
		private void detach_Articulos(Articulo entity)
		{
			this.SendPropertyChanging();
			entity.Marca1 = null;
		}
	}
	
	[Table(Name="dbo.Modulos")]
	public partial class Modulo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _NombreModulo;
		
		private string _DescripcionOpcion;
		
		private EntitySet<Permiso> _Permisos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNombreModuloChanging(string value);
    partial void OnNombreModuloChanged();
    partial void OnDescripcionOpcionChanging(string value);
    partial void OnDescripcionOpcionChanged();
    #endregion
		
		public Modulo()
		{
			this._Permisos = new EntitySet<Permiso>(new Action<Permiso>(this.attach_Permisos), new Action<Permiso>(this.detach_Permisos));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_NombreModulo", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string NombreModulo
		{
			get
			{
				return this._NombreModulo;
			}
			set
			{
				if ((this._NombreModulo != value))
				{
					this.OnNombreModuloChanging(value);
					this.SendPropertyChanging();
					this._NombreModulo = value;
					this.SendPropertyChanged("NombreModulo");
					this.OnNombreModuloChanged();
				}
			}
		}
		
		[Column(Storage="_DescripcionOpcion", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string DescripcionOpcion
		{
			get
			{
				return this._DescripcionOpcion;
			}
			set
			{
				if ((this._DescripcionOpcion != value))
				{
					this.OnDescripcionOpcionChanging(value);
					this.SendPropertyChanging();
					this._DescripcionOpcion = value;
					this.SendPropertyChanged("DescripcionOpcion");
					this.OnDescripcionOpcionChanged();
				}
			}
		}
		
		[Association(Name="Modulo_Permiso", Storage="_Permisos", ThisKey="Id", OtherKey="Mod_Id")]
		public EntitySet<Permiso> Permisos
		{
			get
			{
				return this._Permisos;
			}
			set
			{
				this._Permisos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Permisos(Permiso entity)
		{
			this.SendPropertyChanging();
			entity.Modulo = this;
		}
		
		private void detach_Permisos(Permiso entity)
		{
			this.SendPropertyChanging();
			entity.Modulo = null;
		}
	}
	
	[Table(Name="dbo.Nivel")]
	public partial class Nivel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _IdNivel;
		
		private string _Descripcion;
		
		private EntitySet<Tecnico> _Tecnicos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdNivelChanging(decimal value);
    partial void OnIdNivelChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Nivel()
		{
			this._Tecnicos = new EntitySet<Tecnico>(new Action<Tecnico>(this.attach_Tecnicos), new Action<Tecnico>(this.detach_Tecnicos));
			OnCreated();
		}
		
		[Column(Storage="_IdNivel", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal IdNivel
		{
			get
			{
				return this._IdNivel;
			}
			set
			{
				if ((this._IdNivel != value))
				{
					this.OnIdNivelChanging(value);
					this.SendPropertyChanging();
					this._IdNivel = value;
					this.SendPropertyChanged("IdNivel");
					this.OnIdNivelChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Nivel_Tecnico", Storage="_Tecnicos", ThisKey="IdNivel", OtherKey="Nivel")]
		public EntitySet<Tecnico> Tecnicos
		{
			get
			{
				return this._Tecnicos;
			}
			set
			{
				this._Tecnicos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tecnicos(Tecnico entity)
		{
			this.SendPropertyChanging();
			entity.Nivel1 = this;
		}
		
		private void detach_Tecnicos(Tecnico entity)
		{
			this.SendPropertyChanging();
			entity.Nivel1 = null;
		}
	}
	
	[Table(Name="dbo.OrdenTrabajo")]
	public partial class OrdenTrabajo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<decimal> _IdArticulo;
		
		private decimal _Id;
		
		private string _Serie;
		
		private System.DateTime _FechaIngreso;
		
		private System.DateTime _FechaEntrega;
		
		private string _Falla;
		
		private string _CondicionArticulo;
		
		private string _Boleta;
		
		private string _Poliza;
		
		private System.Nullable<System.DateTime> _FechaCompra;
		
		private string _LugarCompra;
		
		private int _IdTecnicoAsignado;
		
		private string _Observacion;
		
		private System.Nullable<decimal> _TipoOrden;
		
		private System.Nullable<int> _IdCliente;
		
		private EntitySet<Detalle> _Detalles;
		
		private EntitySet<HistorialModificacionOrden> _HistorialModificacionOrdens;
		
		private EntityRef<Articulo> _Articulo;
		
		private EntityRef<Cliente> _Cliente;
		
		private EntityRef<Tecnico> _Tecnico;
		
		private EntityRef<TipoOrden> _TipoOrden1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdArticuloChanging(System.Nullable<decimal> value);
    partial void OnIdArticuloChanged();
    partial void OnIdChanging(decimal value);
    partial void OnIdChanged();
    partial void OnSerieChanging(string value);
    partial void OnSerieChanged();
    partial void OnFechaIngresoChanging(System.DateTime value);
    partial void OnFechaIngresoChanged();
    partial void OnFechaEntregaChanging(System.DateTime value);
    partial void OnFechaEntregaChanged();
    partial void OnFallaChanging(string value);
    partial void OnFallaChanged();
    partial void OnCondicionArticuloChanging(string value);
    partial void OnCondicionArticuloChanged();
    partial void OnBoletaChanging(string value);
    partial void OnBoletaChanged();
    partial void OnPolizaChanging(string value);
    partial void OnPolizaChanged();
    partial void OnFechaCompraChanging(System.Nullable<System.DateTime> value);
    partial void OnFechaCompraChanged();
    partial void OnLugarCompraChanging(string value);
    partial void OnLugarCompraChanged();
    partial void OnIdTecnicoAsignadoChanging(int value);
    partial void OnIdTecnicoAsignadoChanged();
    partial void OnObservacionChanging(string value);
    partial void OnObservacionChanged();
    partial void OnTipoOrdenChanging(System.Nullable<decimal> value);
    partial void OnTipoOrdenChanged();
    partial void OnIdClienteChanging(System.Nullable<int> value);
    partial void OnIdClienteChanged();
    #endregion
		
		public OrdenTrabajo()
		{
			this._Detalles = new EntitySet<Detalle>(new Action<Detalle>(this.attach_Detalles), new Action<Detalle>(this.detach_Detalles));
			this._HistorialModificacionOrdens = new EntitySet<HistorialModificacionOrden>(new Action<HistorialModificacionOrden>(this.attach_HistorialModificacionOrdens), new Action<HistorialModificacionOrden>(this.detach_HistorialModificacionOrdens));
			this._Articulo = default(EntityRef<Articulo>);
			this._Cliente = default(EntityRef<Cliente>);
			this._Tecnico = default(EntityRef<Tecnico>);
			this._TipoOrden1 = default(EntityRef<TipoOrden>);
			OnCreated();
		}
		
		[Column(Storage="_IdArticulo", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> IdArticulo
		{
			get
			{
				return this._IdArticulo;
			}
			set
			{
				if ((this._IdArticulo != value))
				{
					if (this._Articulo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdArticuloChanging(value);
					this.SendPropertyChanging();
					this._IdArticulo = value;
					this.SendPropertyChanged("IdArticulo");
					this.OnIdArticuloChanged();
				}
			}
		}
		
		[Column(Storage="_Id", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Serie", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Serie
		{
			get
			{
				return this._Serie;
			}
			set
			{
				if ((this._Serie != value))
				{
					this.OnSerieChanging(value);
					this.SendPropertyChanging();
					this._Serie = value;
					this.SendPropertyChanged("Serie");
					this.OnSerieChanged();
				}
			}
		}
		
		[Column(Storage="_FechaIngreso", DbType="DateTime NOT NULL")]
		public System.DateTime FechaIngreso
		{
			get
			{
				return this._FechaIngreso;
			}
			set
			{
				if ((this._FechaIngreso != value))
				{
					this.OnFechaIngresoChanging(value);
					this.SendPropertyChanging();
					this._FechaIngreso = value;
					this.SendPropertyChanged("FechaIngreso");
					this.OnFechaIngresoChanged();
				}
			}
		}
		
		[Column(Storage="_FechaEntrega", DbType="DateTime NOT NULL")]
		public System.DateTime FechaEntrega
		{
			get
			{
				return this._FechaEntrega;
			}
			set
			{
				if ((this._FechaEntrega != value))
				{
					this.OnFechaEntregaChanging(value);
					this.SendPropertyChanging();
					this._FechaEntrega = value;
					this.SendPropertyChanged("FechaEntrega");
					this.OnFechaEntregaChanged();
				}
			}
		}
		
		[Column(Storage="_Falla", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Falla
		{
			get
			{
				return this._Falla;
			}
			set
			{
				if ((this._Falla != value))
				{
					this.OnFallaChanging(value);
					this.SendPropertyChanging();
					this._Falla = value;
					this.SendPropertyChanged("Falla");
					this.OnFallaChanged();
				}
			}
		}
		
		[Column(Storage="_CondicionArticulo", DbType="VarChar(250)")]
		public string CondicionArticulo
		{
			get
			{
				return this._CondicionArticulo;
			}
			set
			{
				if ((this._CondicionArticulo != value))
				{
					this.OnCondicionArticuloChanging(value);
					this.SendPropertyChanging();
					this._CondicionArticulo = value;
					this.SendPropertyChanged("CondicionArticulo");
					this.OnCondicionArticuloChanged();
				}
			}
		}
		
		[Column(Storage="_Boleta", DbType="VarChar(50)")]
		public string Boleta
		{
			get
			{
				return this._Boleta;
			}
			set
			{
				if ((this._Boleta != value))
				{
					this.OnBoletaChanging(value);
					this.SendPropertyChanging();
					this._Boleta = value;
					this.SendPropertyChanged("Boleta");
					this.OnBoletaChanged();
				}
			}
		}
		
		[Column(Storage="_Poliza", DbType="VarChar(50)")]
		public string Poliza
		{
			get
			{
				return this._Poliza;
			}
			set
			{
				if ((this._Poliza != value))
				{
					this.OnPolizaChanging(value);
					this.SendPropertyChanging();
					this._Poliza = value;
					this.SendPropertyChanged("Poliza");
					this.OnPolizaChanged();
				}
			}
		}
		
		[Column(Storage="_FechaCompra", DbType="DateTime")]
		public System.Nullable<System.DateTime> FechaCompra
		{
			get
			{
				return this._FechaCompra;
			}
			set
			{
				if ((this._FechaCompra != value))
				{
					this.OnFechaCompraChanging(value);
					this.SendPropertyChanging();
					this._FechaCompra = value;
					this.SendPropertyChanged("FechaCompra");
					this.OnFechaCompraChanged();
				}
			}
		}
		
		[Column(Storage="_LugarCompra", DbType="VarChar(100)")]
		public string LugarCompra
		{
			get
			{
				return this._LugarCompra;
			}
			set
			{
				if ((this._LugarCompra != value))
				{
					this.OnLugarCompraChanging(value);
					this.SendPropertyChanging();
					this._LugarCompra = value;
					this.SendPropertyChanged("LugarCompra");
					this.OnLugarCompraChanged();
				}
			}
		}
		
		[Column(Storage="_IdTecnicoAsignado", DbType="Int NOT NULL")]
		public int IdTecnicoAsignado
		{
			get
			{
				return this._IdTecnicoAsignado;
			}
			set
			{
				if ((this._IdTecnicoAsignado != value))
				{
					if (this._Tecnico.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTecnicoAsignadoChanging(value);
					this.SendPropertyChanging();
					this._IdTecnicoAsignado = value;
					this.SendPropertyChanged("IdTecnicoAsignado");
					this.OnIdTecnicoAsignadoChanged();
				}
			}
		}
		
		[Column(Storage="_Observacion", DbType="NVarChar(255)")]
		public string Observacion
		{
			get
			{
				return this._Observacion;
			}
			set
			{
				if ((this._Observacion != value))
				{
					this.OnObservacionChanging(value);
					this.SendPropertyChanging();
					this._Observacion = value;
					this.SendPropertyChanged("Observacion");
					this.OnObservacionChanged();
				}
			}
		}
		
		[Column(Storage="_TipoOrden", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> TipoOrden
		{
			get
			{
				return this._TipoOrden;
			}
			set
			{
				if ((this._TipoOrden != value))
				{
					if (this._TipoOrden1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTipoOrdenChanging(value);
					this.SendPropertyChanging();
					this._TipoOrden = value;
					this.SendPropertyChanged("TipoOrden");
					this.OnTipoOrdenChanged();
				}
			}
		}
		
		[Column(Storage="_IdCliente", DbType="Int")]
		public System.Nullable<int> IdCliente
		{
			get
			{
				return this._IdCliente;
			}
			set
			{
				if ((this._IdCliente != value))
				{
					if (this._Cliente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdClienteChanging(value);
					this.SendPropertyChanging();
					this._IdCliente = value;
					this.SendPropertyChanged("IdCliente");
					this.OnIdClienteChanged();
				}
			}
		}
		
		[Association(Name="OrdenTrabajo_Detalle", Storage="_Detalles", ThisKey="Id", OtherKey="IdOrden")]
		public EntitySet<Detalle> Detalles
		{
			get
			{
				return this._Detalles;
			}
			set
			{
				this._Detalles.Assign(value);
			}
		}
		
		[Association(Name="OrdenTrabajo_HistorialModificacionOrden", Storage="_HistorialModificacionOrdens", ThisKey="Id", OtherKey="IdOrden")]
		public EntitySet<HistorialModificacionOrden> HistorialModificacionOrdens
		{
			get
			{
				return this._HistorialModificacionOrdens;
			}
			set
			{
				this._HistorialModificacionOrdens.Assign(value);
			}
		}
		
		[Association(Name="Articulo_OrdenTrabajo", Storage="_Articulo", ThisKey="IdArticulo", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Articulo Articulo
		{
			get
			{
				return this._Articulo.Entity;
			}
			set
			{
				Articulo previousValue = this._Articulo.Entity;
				if (((previousValue != value) 
							|| (this._Articulo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Articulo.Entity = null;
						previousValue.OrdenTrabajos.Remove(this);
					}
					this._Articulo.Entity = value;
					if ((value != null))
					{
						value.OrdenTrabajos.Add(this);
						this._IdArticulo = value.Id;
					}
					else
					{
						this._IdArticulo = default(Nullable<decimal>);
					}
					this.SendPropertyChanged("Articulo");
				}
			}
		}
		
		[Association(Name="Cliente_OrdenTrabajo", Storage="_Cliente", ThisKey="IdCliente", OtherKey="Id", IsForeignKey=true)]
		public Cliente Cliente
		{
			get
			{
				return this._Cliente.Entity;
			}
			set
			{
				Cliente previousValue = this._Cliente.Entity;
				if (((previousValue != value) 
							|| (this._Cliente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cliente.Entity = null;
						previousValue.OrdenTrabajos.Remove(this);
					}
					this._Cliente.Entity = value;
					if ((value != null))
					{
						value.OrdenTrabajos.Add(this);
						this._IdCliente = value.Id;
					}
					else
					{
						this._IdCliente = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cliente");
				}
			}
		}
		
		[Association(Name="Tecnico_OrdenTrabajo", Storage="_Tecnico", ThisKey="IdTecnicoAsignado", OtherKey="Id", IsForeignKey=true)]
		public Tecnico Tecnico
		{
			get
			{
				return this._Tecnico.Entity;
			}
			set
			{
				Tecnico previousValue = this._Tecnico.Entity;
				if (((previousValue != value) 
							|| (this._Tecnico.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tecnico.Entity = null;
						previousValue.OrdenTrabajos.Remove(this);
					}
					this._Tecnico.Entity = value;
					if ((value != null))
					{
						value.OrdenTrabajos.Add(this);
						this._IdTecnicoAsignado = value.Id;
					}
					else
					{
						this._IdTecnicoAsignado = default(int);
					}
					this.SendPropertyChanged("Tecnico");
				}
			}
		}
		
		[Association(Name="TipoOrden_OrdenTrabajo", Storage="_TipoOrden1", ThisKey="TipoOrden", OtherKey="IdTipoOrden", IsForeignKey=true, DeleteRule="CASCADE")]
		public TipoOrden TipoOrden1
		{
			get
			{
				return this._TipoOrden1.Entity;
			}
			set
			{
				TipoOrden previousValue = this._TipoOrden1.Entity;
				if (((previousValue != value) 
							|| (this._TipoOrden1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoOrden1.Entity = null;
						previousValue.OrdenTrabajos.Remove(this);
					}
					this._TipoOrden1.Entity = value;
					if ((value != null))
					{
						value.OrdenTrabajos.Add(this);
						this._TipoOrden = value.IdTipoOrden;
					}
					else
					{
						this._TipoOrden = default(Nullable<decimal>);
					}
					this.SendPropertyChanged("TipoOrden1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Detalles(Detalle entity)
		{
			this.SendPropertyChanging();
			entity.OrdenTrabajo = this;
		}
		
		private void detach_Detalles(Detalle entity)
		{
			this.SendPropertyChanging();
			entity.OrdenTrabajo = null;
		}
		
		private void attach_HistorialModificacionOrdens(HistorialModificacionOrden entity)
		{
			this.SendPropertyChanging();
			entity.OrdenTrabajo = this;
		}
		
		private void detach_HistorialModificacionOrdens(HistorialModificacionOrden entity)
		{
			this.SendPropertyChanging();
			entity.OrdenTrabajo = null;
		}
	}
	
	[Table(Name="dbo.Perfil")]
	public partial class Perfil : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<PerfilPermiso> _PerfilPermisos;
		
		private EntitySet<Usuario> _Usuarios;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public Perfil()
		{
			this._PerfilPermisos = new EntitySet<PerfilPermiso>(new Action<PerfilPermiso>(this.attach_PerfilPermisos), new Action<PerfilPermiso>(this.detach_PerfilPermisos));
			this._Usuarios = new EntitySet<Usuario>(new Action<Usuario>(this.attach_Usuarios), new Action<Usuario>(this.detach_Usuarios));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="Perfil_PerfilPermiso", Storage="_PerfilPermisos", ThisKey="Id", OtherKey="IdPerfil")]
		public EntitySet<PerfilPermiso> PerfilPermisos
		{
			get
			{
				return this._PerfilPermisos;
			}
			set
			{
				this._PerfilPermisos.Assign(value);
			}
		}
		
		[Association(Name="Perfil_Usuario", Storage="_Usuarios", ThisKey="Id", OtherKey="PerfilUsuario")]
		public EntitySet<Usuario> Usuarios
		{
			get
			{
				return this._Usuarios;
			}
			set
			{
				this._Usuarios.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PerfilPermisos(PerfilPermiso entity)
		{
			this.SendPropertyChanging();
			entity.Perfil = this;
		}
		
		private void detach_PerfilPermisos(PerfilPermiso entity)
		{
			this.SendPropertyChanging();
			entity.Perfil = null;
		}
		
		private void attach_Usuarios(Usuario entity)
		{
			this.SendPropertyChanging();
			entity.Perfil = this;
		}
		
		private void detach_Usuarios(Usuario entity)
		{
			this.SendPropertyChanging();
			entity.Perfil = null;
		}
	}
	
	[Table(Name="dbo.PerfilPermiso")]
	public partial class PerfilPermiso : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdPerfil;
		
		private bool _Estado;
		
		private System.Nullable<int> _IdPermiso;
		
		private EntityRef<Perfil> _Perfil;
		
		private EntityRef<Permiso> _Permiso;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdPerfilChanging(int value);
    partial void OnIdPerfilChanged();
    partial void OnEstadoChanging(bool value);
    partial void OnEstadoChanged();
    partial void OnIdPermisoChanging(System.Nullable<int> value);
    partial void OnIdPermisoChanged();
    #endregion
		
		public PerfilPermiso()
		{
			this._Perfil = default(EntityRef<Perfil>);
			this._Permiso = default(EntityRef<Permiso>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdPerfil", DbType="Int NOT NULL")]
		public int IdPerfil
		{
			get
			{
				return this._IdPerfil;
			}
			set
			{
				if ((this._IdPerfil != value))
				{
					if (this._Perfil.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPerfilChanging(value);
					this.SendPropertyChanging();
					this._IdPerfil = value;
					this.SendPropertyChanged("IdPerfil");
					this.OnIdPerfilChanged();
				}
			}
		}
		
		[Column(Storage="_Estado", DbType="Bit NOT NULL")]
		public bool Estado
		{
			get
			{
				return this._Estado;
			}
			set
			{
				if ((this._Estado != value))
				{
					this.OnEstadoChanging(value);
					this.SendPropertyChanging();
					this._Estado = value;
					this.SendPropertyChanged("Estado");
					this.OnEstadoChanged();
				}
			}
		}
		
		[Column(Storage="_IdPermiso", DbType="Int")]
		public System.Nullable<int> IdPermiso
		{
			get
			{
				return this._IdPermiso;
			}
			set
			{
				if ((this._IdPermiso != value))
				{
					if (this._Permiso.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPermisoChanging(value);
					this.SendPropertyChanging();
					this._IdPermiso = value;
					this.SendPropertyChanged("IdPermiso");
					this.OnIdPermisoChanged();
				}
			}
		}
		
		[Association(Name="Perfil_PerfilPermiso", Storage="_Perfil", ThisKey="IdPerfil", OtherKey="Id", IsForeignKey=true)]
		public Perfil Perfil
		{
			get
			{
				return this._Perfil.Entity;
			}
			set
			{
				Perfil previousValue = this._Perfil.Entity;
				if (((previousValue != value) 
							|| (this._Perfil.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Perfil.Entity = null;
						previousValue.PerfilPermisos.Remove(this);
					}
					this._Perfil.Entity = value;
					if ((value != null))
					{
						value.PerfilPermisos.Add(this);
						this._IdPerfil = value.Id;
					}
					else
					{
						this._IdPerfil = default(int);
					}
					this.SendPropertyChanged("Perfil");
				}
			}
		}
		
		[Association(Name="Permiso_PerfilPermiso", Storage="_Permiso", ThisKey="IdPermiso", OtherKey="Id", IsForeignKey=true)]
		public Permiso Permiso
		{
			get
			{
				return this._Permiso.Entity;
			}
			set
			{
				Permiso previousValue = this._Permiso.Entity;
				if (((previousValue != value) 
							|| (this._Permiso.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permiso.Entity = null;
						previousValue.PerfilPermisos.Remove(this);
					}
					this._Permiso.Entity = value;
					if ((value != null))
					{
						value.PerfilPermisos.Add(this);
						this._IdPermiso = value.Id;
					}
					else
					{
						this._IdPermiso = default(Nullable<int>);
					}
					this.SendPropertyChanged("Permiso");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Permisos")]
	public partial class Permiso : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Mod_Id;
		
		private string _Opcion;
		
		private string _DescripcionOpcion;
		
		private EntitySet<PerfilPermiso> _PerfilPermisos;
		
		private EntitySet<UsuarioPermiso> _UsuarioPermisos;
		
		private EntityRef<Modulo> _Modulo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMod_IdChanging(System.Nullable<int> value);
    partial void OnMod_IdChanged();
    partial void OnOpcionChanging(string value);
    partial void OnOpcionChanged();
    partial void OnDescripcionOpcionChanging(string value);
    partial void OnDescripcionOpcionChanged();
    #endregion
		
		public Permiso()
		{
			this._PerfilPermisos = new EntitySet<PerfilPermiso>(new Action<PerfilPermiso>(this.attach_PerfilPermisos), new Action<PerfilPermiso>(this.detach_PerfilPermisos));
			this._UsuarioPermisos = new EntitySet<UsuarioPermiso>(new Action<UsuarioPermiso>(this.attach_UsuarioPermisos), new Action<UsuarioPermiso>(this.detach_UsuarioPermisos));
			this._Modulo = default(EntityRef<Modulo>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Mod_Id", DbType="Int")]
		public System.Nullable<int> Mod_Id
		{
			get
			{
				return this._Mod_Id;
			}
			set
			{
				if ((this._Mod_Id != value))
				{
					if (this._Modulo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMod_IdChanging(value);
					this.SendPropertyChanging();
					this._Mod_Id = value;
					this.SendPropertyChanged("Mod_Id");
					this.OnMod_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Opcion", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Opcion
		{
			get
			{
				return this._Opcion;
			}
			set
			{
				if ((this._Opcion != value))
				{
					this.OnOpcionChanging(value);
					this.SendPropertyChanging();
					this._Opcion = value;
					this.SendPropertyChanged("Opcion");
					this.OnOpcionChanged();
				}
			}
		}
		
		[Column(Storage="_DescripcionOpcion", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string DescripcionOpcion
		{
			get
			{
				return this._DescripcionOpcion;
			}
			set
			{
				if ((this._DescripcionOpcion != value))
				{
					this.OnDescripcionOpcionChanging(value);
					this.SendPropertyChanging();
					this._DescripcionOpcion = value;
					this.SendPropertyChanged("DescripcionOpcion");
					this.OnDescripcionOpcionChanged();
				}
			}
		}
		
		[Association(Name="Permiso_PerfilPermiso", Storage="_PerfilPermisos", ThisKey="Id", OtherKey="IdPermiso")]
		public EntitySet<PerfilPermiso> PerfilPermisos
		{
			get
			{
				return this._PerfilPermisos;
			}
			set
			{
				this._PerfilPermisos.Assign(value);
			}
		}
		
		[Association(Name="Permiso_UsuarioPermiso", Storage="_UsuarioPermisos", ThisKey="Id", OtherKey="IdPermiso")]
		public EntitySet<UsuarioPermiso> UsuarioPermisos
		{
			get
			{
				return this._UsuarioPermisos;
			}
			set
			{
				this._UsuarioPermisos.Assign(value);
			}
		}
		
		[Association(Name="Modulo_Permiso", Storage="_Modulo", ThisKey="Mod_Id", OtherKey="Id", IsForeignKey=true)]
		public Modulo Modulo
		{
			get
			{
				return this._Modulo.Entity;
			}
			set
			{
				Modulo previousValue = this._Modulo.Entity;
				if (((previousValue != value) 
							|| (this._Modulo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Modulo.Entity = null;
						previousValue.Permisos.Remove(this);
					}
					this._Modulo.Entity = value;
					if ((value != null))
					{
						value.Permisos.Add(this);
						this._Mod_Id = value.Id;
					}
					else
					{
						this._Mod_Id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Modulo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PerfilPermisos(PerfilPermiso entity)
		{
			this.SendPropertyChanging();
			entity.Permiso = this;
		}
		
		private void detach_PerfilPermisos(PerfilPermiso entity)
		{
			this.SendPropertyChanging();
			entity.Permiso = null;
		}
		
		private void attach_UsuarioPermisos(UsuarioPermiso entity)
		{
			this.SendPropertyChanging();
			entity.Permiso = this;
		}
		
		private void detach_UsuarioPermisos(UsuarioPermiso entity)
		{
			this.SendPropertyChanging();
			entity.Permiso = null;
		}
	}
	
	[Table(Name="dbo.Porcentaje")]
	public partial class Porcentaje : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _Id;
		
		private decimal _Porcentaje1;
		
		private decimal _IdPrecio;
		
		private EntityRef<PrecioGarantia> _PrecioGarantia;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(decimal value);
    partial void OnIdChanged();
    partial void OnPorcentaje1Changing(decimal value);
    partial void OnPorcentaje1Changed();
    partial void OnIdPrecioChanging(decimal value);
    partial void OnIdPrecioChanged();
    #endregion
		
		public Porcentaje()
		{
			this._PrecioGarantia = default(EntityRef<PrecioGarantia>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="Porcentaje", Storage="_Porcentaje1", DbType="Decimal(18,0) NOT NULL")]
		public decimal Porcentaje1
		{
			get
			{
				return this._Porcentaje1;
			}
			set
			{
				if ((this._Porcentaje1 != value))
				{
					this.OnPorcentaje1Changing(value);
					this.SendPropertyChanging();
					this._Porcentaje1 = value;
					this.SendPropertyChanged("Porcentaje1");
					this.OnPorcentaje1Changed();
				}
			}
		}
		
		[Column(Storage="_IdPrecio", DbType="Decimal(18,0) NOT NULL")]
		public decimal IdPrecio
		{
			get
			{
				return this._IdPrecio;
			}
			set
			{
				if ((this._IdPrecio != value))
				{
					if (this._PrecioGarantia.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPrecioChanging(value);
					this.SendPropertyChanging();
					this._IdPrecio = value;
					this.SendPropertyChanged("IdPrecio");
					this.OnIdPrecioChanged();
				}
			}
		}
		
		[Association(Name="PrecioGarantia_Porcentaje", Storage="_PrecioGarantia", ThisKey="IdPrecio", OtherKey="IdPrecioGarantia", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PrecioGarantia PrecioGarantia
		{
			get
			{
				return this._PrecioGarantia.Entity;
			}
			set
			{
				PrecioGarantia previousValue = this._PrecioGarantia.Entity;
				if (((previousValue != value) 
							|| (this._PrecioGarantia.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrecioGarantia.Entity = null;
						previousValue.Porcentajes.Remove(this);
					}
					this._PrecioGarantia.Entity = value;
					if ((value != null))
					{
						value.Porcentajes.Add(this);
						this._IdPrecio = value.IdPrecioGarantia;
					}
					else
					{
						this._IdPrecio = default(decimal);
					}
					this.SendPropertyChanged("PrecioGarantia");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PrecioGarantia")]
	public partial class PrecioGarantia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _IdPrecioGarantia;
		
		private decimal _ValorRevision;
		
		private decimal _ValorReparacion;
		
		private EntitySet<Articulo> _Articulos;
		
		private EntitySet<Porcentaje> _Porcentajes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdPrecioGarantiaChanging(decimal value);
    partial void OnIdPrecioGarantiaChanged();
    partial void OnValorRevisionChanging(decimal value);
    partial void OnValorRevisionChanged();
    partial void OnValorReparacionChanging(decimal value);
    partial void OnValorReparacionChanged();
    #endregion
		
		public PrecioGarantia()
		{
			this._Articulos = new EntitySet<Articulo>(new Action<Articulo>(this.attach_Articulos), new Action<Articulo>(this.detach_Articulos));
			this._Porcentajes = new EntitySet<Porcentaje>(new Action<Porcentaje>(this.attach_Porcentajes), new Action<Porcentaje>(this.detach_Porcentajes));
			OnCreated();
		}
		
		[Column(Storage="_IdPrecioGarantia", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal IdPrecioGarantia
		{
			get
			{
				return this._IdPrecioGarantia;
			}
			set
			{
				if ((this._IdPrecioGarantia != value))
				{
					this.OnIdPrecioGarantiaChanging(value);
					this.SendPropertyChanging();
					this._IdPrecioGarantia = value;
					this.SendPropertyChanged("IdPrecioGarantia");
					this.OnIdPrecioGarantiaChanged();
				}
			}
		}
		
		[Column(Storage="_ValorRevision", DbType="Decimal(18,0) NOT NULL")]
		public decimal ValorRevision
		{
			get
			{
				return this._ValorRevision;
			}
			set
			{
				if ((this._ValorRevision != value))
				{
					this.OnValorRevisionChanging(value);
					this.SendPropertyChanging();
					this._ValorRevision = value;
					this.SendPropertyChanged("ValorRevision");
					this.OnValorRevisionChanged();
				}
			}
		}
		
		[Column(Storage="_ValorReparacion", DbType="Decimal(18,0) NOT NULL")]
		public decimal ValorReparacion
		{
			get
			{
				return this._ValorReparacion;
			}
			set
			{
				if ((this._ValorReparacion != value))
				{
					this.OnValorReparacionChanging(value);
					this.SendPropertyChanging();
					this._ValorReparacion = value;
					this.SendPropertyChanged("ValorReparacion");
					this.OnValorReparacionChanged();
				}
			}
		}
		
		[Association(Name="PrecioGarantia_Articulo", Storage="_Articulos", ThisKey="IdPrecioGarantia", OtherKey="PrecioGarantia")]
		public EntitySet<Articulo> Articulos
		{
			get
			{
				return this._Articulos;
			}
			set
			{
				this._Articulos.Assign(value);
			}
		}
		
		[Association(Name="PrecioGarantia_Porcentaje", Storage="_Porcentajes", ThisKey="IdPrecioGarantia", OtherKey="IdPrecio")]
		public EntitySet<Porcentaje> Porcentajes
		{
			get
			{
				return this._Porcentajes;
			}
			set
			{
				this._Porcentajes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Articulos(Articulo entity)
		{
			this.SendPropertyChanging();
			entity.PrecioGarantia1 = this;
		}
		
		private void detach_Articulos(Articulo entity)
		{
			this.SendPropertyChanging();
			entity.PrecioGarantia1 = null;
		}
		
		private void attach_Porcentajes(Porcentaje entity)
		{
			this.SendPropertyChanging();
			entity.PrecioGarantia = this;
		}
		
		private void detach_Porcentajes(Porcentaje entity)
		{
			this.SendPropertyChanging();
			entity.PrecioGarantia = null;
		}
	}
	
	[Table(Name="dbo.Provincia")]
	public partial class Provincia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _Id;
		
		private string _nombre;
		
		private decimal _IdRegion;
		
		private EntitySet<Direccion> _Direccions;
		
		private EntityRef<Region> _Region;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(decimal value);
    partial void OnIdChanged();
    partial void OnnombreChanging(string value);
    partial void OnnombreChanged();
    partial void OnIdRegionChanging(decimal value);
    partial void OnIdRegionChanged();
    #endregion
		
		public Provincia()
		{
			this._Direccions = new EntitySet<Direccion>(new Action<Direccion>(this.attach_Direccions), new Action<Direccion>(this.detach_Direccions));
			this._Region = default(EntityRef<Region>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Decimal(3,0) NOT NULL", IsPrimaryKey=true)]
		public decimal Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_nombre", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string nombre
		{
			get
			{
				return this._nombre;
			}
			set
			{
				if ((this._nombre != value))
				{
					this.OnnombreChanging(value);
					this.SendPropertyChanging();
					this._nombre = value;
					this.SendPropertyChanged("nombre");
					this.OnnombreChanged();
				}
			}
		}
		
		[Column(Storage="_IdRegion", DbType="Decimal(2,0) NOT NULL")]
		public decimal IdRegion
		{
			get
			{
				return this._IdRegion;
			}
			set
			{
				if ((this._IdRegion != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdRegionChanging(value);
					this.SendPropertyChanging();
					this._IdRegion = value;
					this.SendPropertyChanged("IdRegion");
					this.OnIdRegionChanged();
				}
			}
		}
		
		[Association(Name="Provincia_Direccion", Storage="_Direccions", ThisKey="Id", OtherKey="Provincia")]
		public EntitySet<Direccion> Direccions
		{
			get
			{
				return this._Direccions;
			}
			set
			{
				this._Direccions.Assign(value);
			}
		}
		
		[Association(Name="Region_Provincia", Storage="_Region", ThisKey="IdRegion", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.Provincias.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.Provincias.Add(this);
						this._IdRegion = value.Id;
					}
					else
					{
						this._IdRegion = default(decimal);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Direccions(Direccion entity)
		{
			this.SendPropertyChanging();
			entity.Provincia1 = this;
		}
		
		private void detach_Direccions(Direccion entity)
		{
			this.SendPropertyChanging();
			entity.Provincia1 = null;
		}
	}
	
	[Table(Name="dbo.Region")]
	public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _Id;
		
		private string _Nombre;
		
		private EntitySet<Direccion> _Direccions;
		
		private EntitySet<Provincia> _Provincias;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(decimal value);
    partial void OnIdChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    #endregion
		
		public Region()
		{
			this._Direccions = new EntitySet<Direccion>(new Action<Direccion>(this.attach_Direccions), new Action<Direccion>(this.detach_Direccions));
			this._Provincias = new EntitySet<Provincia>(new Action<Provincia>(this.attach_Provincias), new Action<Provincia>(this.detach_Provincias));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Decimal(2,0) NOT NULL", IsPrimaryKey=true)]
		public decimal Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nombre", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string Nombre
		{
			get
			{
				return this._Nombre;
			}
			set
			{
				if ((this._Nombre != value))
				{
					this.OnNombreChanging(value);
					this.SendPropertyChanging();
					this._Nombre = value;
					this.SendPropertyChanged("Nombre");
					this.OnNombreChanged();
				}
			}
		}
		
		[Association(Name="Region_Direccion", Storage="_Direccions", ThisKey="Id", OtherKey="Region")]
		public EntitySet<Direccion> Direccions
		{
			get
			{
				return this._Direccions;
			}
			set
			{
				this._Direccions.Assign(value);
			}
		}
		
		[Association(Name="Region_Provincia", Storage="_Provincias", ThisKey="Id", OtherKey="IdRegion")]
		public EntitySet<Provincia> Provincias
		{
			get
			{
				return this._Provincias;
			}
			set
			{
				this._Provincias.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Direccions(Direccion entity)
		{
			this.SendPropertyChanging();
			entity.Region1 = this;
		}
		
		private void detach_Direccions(Direccion entity)
		{
			this.SendPropertyChanging();
			entity.Region1 = null;
		}
		
		private void attach_Provincias(Provincia entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_Provincias(Provincia entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
	}
	
	[Table(Name="dbo.Tecnicos")]
	public partial class Tecnico : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private decimal _Nivel;
		
		private EntitySet<Especialidade> _Especialidades;
		
		private EntitySet<OrdenTrabajo> _OrdenTrabajos;
		
		private EntityRef<Nivel> _Nivel1;
		
		private EntityRef<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNivelChanging(decimal value);
    partial void OnNivelChanged();
    #endregion
		
		public Tecnico()
		{
			this._Especialidades = new EntitySet<Especialidade>(new Action<Especialidade>(this.attach_Especialidades), new Action<Especialidade>(this.detach_Especialidades));
			this._OrdenTrabajos = new EntitySet<OrdenTrabajo>(new Action<OrdenTrabajo>(this.attach_OrdenTrabajos), new Action<OrdenTrabajo>(this.detach_OrdenTrabajos));
			this._Nivel1 = default(EntityRef<Nivel>);
			this._Usuario = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Nivel", DbType="Decimal(18,0) NOT NULL")]
		public decimal Nivel
		{
			get
			{
				return this._Nivel;
			}
			set
			{
				if ((this._Nivel != value))
				{
					if (this._Nivel1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNivelChanging(value);
					this.SendPropertyChanging();
					this._Nivel = value;
					this.SendPropertyChanged("Nivel");
					this.OnNivelChanged();
				}
			}
		}
		
		[Association(Name="Tecnico_Especialidade", Storage="_Especialidades", ThisKey="Id", OtherKey="IdTecnico")]
		public EntitySet<Especialidade> Especialidades
		{
			get
			{
				return this._Especialidades;
			}
			set
			{
				this._Especialidades.Assign(value);
			}
		}
		
		[Association(Name="Tecnico_OrdenTrabajo", Storage="_OrdenTrabajos", ThisKey="Id", OtherKey="IdTecnicoAsignado")]
		public EntitySet<OrdenTrabajo> OrdenTrabajos
		{
			get
			{
				return this._OrdenTrabajos;
			}
			set
			{
				this._OrdenTrabajos.Assign(value);
			}
		}
		
		[Association(Name="Nivel_Tecnico", Storage="_Nivel1", ThisKey="Nivel", OtherKey="IdNivel", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Nivel Nivel1
		{
			get
			{
				return this._Nivel1.Entity;
			}
			set
			{
				Nivel previousValue = this._Nivel1.Entity;
				if (((previousValue != value) 
							|| (this._Nivel1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Nivel1.Entity = null;
						previousValue.Tecnicos.Remove(this);
					}
					this._Nivel1.Entity = value;
					if ((value != null))
					{
						value.Tecnicos.Add(this);
						this._Nivel = value.IdNivel;
					}
					else
					{
						this._Nivel = default(decimal);
					}
					this.SendPropertyChanged("Nivel1");
				}
			}
		}
		
		[Association(Name="Usuario_Tecnico", Storage="_Usuario", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.Tecnico = null;
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.Tecnico = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Especialidades(Especialidade entity)
		{
			this.SendPropertyChanging();
			entity.Tecnico = this;
		}
		
		private void detach_Especialidades(Especialidade entity)
		{
			this.SendPropertyChanging();
			entity.Tecnico = null;
		}
		
		private void attach_OrdenTrabajos(OrdenTrabajo entity)
		{
			this.SendPropertyChanging();
			entity.Tecnico = this;
		}
		
		private void detach_OrdenTrabajos(OrdenTrabajo entity)
		{
			this.SendPropertyChanging();
			entity.Tecnico = null;
		}
	}
	
	[Table(Name="dbo.TipoArticulo")]
	public partial class TipoArticulo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _IdTipoArticulo;
		
		private string _Descripcion;
		
		private EntitySet<Articulo> _Articulos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTipoArticuloChanging(decimal value);
    partial void OnIdTipoArticuloChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public TipoArticulo()
		{
			this._Articulos = new EntitySet<Articulo>(new Action<Articulo>(this.attach_Articulos), new Action<Articulo>(this.detach_Articulos));
			OnCreated();
		}
		
		[Column(Storage="_IdTipoArticulo", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal IdTipoArticulo
		{
			get
			{
				return this._IdTipoArticulo;
			}
			set
			{
				if ((this._IdTipoArticulo != value))
				{
					this.OnIdTipoArticuloChanging(value);
					this.SendPropertyChanging();
					this._IdTipoArticulo = value;
					this.SendPropertyChanged("IdTipoArticulo");
					this.OnIdTipoArticuloChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="TipoArticulo_Articulo", Storage="_Articulos", ThisKey="IdTipoArticulo", OtherKey="TipoArticulo")]
		public EntitySet<Articulo> Articulos
		{
			get
			{
				return this._Articulos;
			}
			set
			{
				this._Articulos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Articulos(Articulo entity)
		{
			this.SendPropertyChanging();
			entity.TipoArticulo1 = this;
		}
		
		private void detach_Articulos(Articulo entity)
		{
			this.SendPropertyChanging();
			entity.TipoArticulo1 = null;
		}
	}
	
	[Table(Name="dbo.TipoCliente")]
	public partial class TipoCliente : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Descripcion;
		
		private EntitySet<Cliente> _Clientes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public TipoCliente()
		{
			this._Clientes = new EntitySet<Cliente>(new Action<Cliente>(this.attach_Clientes), new Action<Cliente>(this.detach_Clientes));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="TipoCliente_Cliente", Storage="_Clientes", ThisKey="Id", OtherKey="TipoCliente")]
		public EntitySet<Cliente> Clientes
		{
			get
			{
				return this._Clientes;
			}
			set
			{
				this._Clientes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clientes(Cliente entity)
		{
			this.SendPropertyChanging();
			entity.TipoCliente1 = this;
		}
		
		private void detach_Clientes(Cliente entity)
		{
			this.SendPropertyChanging();
			entity.TipoCliente1 = null;
		}
	}
	
	[Table(Name="dbo.TipoContacto")]
	public partial class TipoContacto : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _IdTipoContacto;
		
		private string _Descripcion;
		
		private EntitySet<Contacto> _Contactos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTipoContactoChanging(decimal value);
    partial void OnIdTipoContactoChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public TipoContacto()
		{
			this._Contactos = new EntitySet<Contacto>(new Action<Contacto>(this.attach_Contactos), new Action<Contacto>(this.detach_Contactos));
			OnCreated();
		}
		
		[Column(Storage="_IdTipoContacto", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal IdTipoContacto
		{
			get
			{
				return this._IdTipoContacto;
			}
			set
			{
				if ((this._IdTipoContacto != value))
				{
					this.OnIdTipoContactoChanging(value);
					this.SendPropertyChanging();
					this._IdTipoContacto = value;
					this.SendPropertyChanged("IdTipoContacto");
					this.OnIdTipoContactoChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="TipoContacto_Contacto", Storage="_Contactos", ThisKey="IdTipoContacto", OtherKey="TipoContacto")]
		public EntitySet<Contacto> Contactos
		{
			get
			{
				return this._Contactos;
			}
			set
			{
				this._Contactos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contactos(Contacto entity)
		{
			this.SendPropertyChanging();
			entity.TipoContacto1 = this;
		}
		
		private void detach_Contactos(Contacto entity)
		{
			this.SendPropertyChanging();
			entity.TipoContacto1 = null;
		}
	}
	
	[Table(Name="dbo.TipoDireccion")]
	public partial class TipoDireccion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _IdTipoDireccion;
		
		private string _Descripcion;
		
		private EntitySet<Direccion> _Direccions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTipoDireccionChanging(decimal value);
    partial void OnIdTipoDireccionChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public TipoDireccion()
		{
			this._Direccions = new EntitySet<Direccion>(new Action<Direccion>(this.attach_Direccions), new Action<Direccion>(this.detach_Direccions));
			OnCreated();
		}
		
		[Column(Storage="_IdTipoDireccion", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal IdTipoDireccion
		{
			get
			{
				return this._IdTipoDireccion;
			}
			set
			{
				if ((this._IdTipoDireccion != value))
				{
					this.OnIdTipoDireccionChanging(value);
					this.SendPropertyChanging();
					this._IdTipoDireccion = value;
					this.SendPropertyChanged("IdTipoDireccion");
					this.OnIdTipoDireccionChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="TipoDireccion_Direccion", Storage="_Direccions", ThisKey="IdTipoDireccion", OtherKey="TipoDireccion")]
		public EntitySet<Direccion> Direccions
		{
			get
			{
				return this._Direccions;
			}
			set
			{
				this._Direccions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Direccions(Direccion entity)
		{
			this.SendPropertyChanging();
			entity.TipoDireccion1 = this;
		}
		
		private void detach_Direccions(Direccion entity)
		{
			this.SendPropertyChanging();
			entity.TipoDireccion1 = null;
		}
	}
	
	[Table(Name="dbo.TipoEspecialidad")]
	public partial class TipoEspecialidad : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _IdTipoEspecialidad;
		
		private string _Descripcion;
		
		private EntitySet<Especialidade> _Especialidades;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTipoEspecialidadChanging(decimal value);
    partial void OnIdTipoEspecialidadChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public TipoEspecialidad()
		{
			this._Especialidades = new EntitySet<Especialidade>(new Action<Especialidade>(this.attach_Especialidades), new Action<Especialidade>(this.detach_Especialidades));
			OnCreated();
		}
		
		[Column(Storage="_IdTipoEspecialidad", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal IdTipoEspecialidad
		{
			get
			{
				return this._IdTipoEspecialidad;
			}
			set
			{
				if ((this._IdTipoEspecialidad != value))
				{
					this.OnIdTipoEspecialidadChanging(value);
					this.SendPropertyChanging();
					this._IdTipoEspecialidad = value;
					this.SendPropertyChanged("IdTipoEspecialidad");
					this.OnIdTipoEspecialidadChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="TipoEspecialidad_Especialidade", Storage="_Especialidades", ThisKey="IdTipoEspecialidad", OtherKey="TipoEspecialidad")]
		public EntitySet<Especialidade> Especialidades
		{
			get
			{
				return this._Especialidades;
			}
			set
			{
				this._Especialidades.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Especialidades(Especialidade entity)
		{
			this.SendPropertyChanging();
			entity.TipoEspecialidad1 = this;
		}
		
		private void detach_Especialidades(Especialidade entity)
		{
			this.SendPropertyChanging();
			entity.TipoEspecialidad1 = null;
		}
	}
	
	[Table(Name="dbo.TipoOrden")]
	public partial class TipoOrden : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private decimal _IdTipoOrden;
		
		private string _Descripcion;
		
		private EntitySet<OrdenTrabajo> _OrdenTrabajos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdTipoOrdenChanging(decimal value);
    partial void OnIdTipoOrdenChanged();
    partial void OnDescripcionChanging(string value);
    partial void OnDescripcionChanged();
    #endregion
		
		public TipoOrden()
		{
			this._OrdenTrabajos = new EntitySet<OrdenTrabajo>(new Action<OrdenTrabajo>(this.attach_OrdenTrabajos), new Action<OrdenTrabajo>(this.detach_OrdenTrabajos));
			OnCreated();
		}
		
		[Column(Storage="_IdTipoOrden", DbType="Decimal(18,0) NOT NULL", IsPrimaryKey=true)]
		public decimal IdTipoOrden
		{
			get
			{
				return this._IdTipoOrden;
			}
			set
			{
				if ((this._IdTipoOrden != value))
				{
					this.OnIdTipoOrdenChanging(value);
					this.SendPropertyChanging();
					this._IdTipoOrden = value;
					this.SendPropertyChanged("IdTipoOrden");
					this.OnIdTipoOrdenChanged();
				}
			}
		}
		
		[Column(Storage="_Descripcion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Descripcion
		{
			get
			{
				return this._Descripcion;
			}
			set
			{
				if ((this._Descripcion != value))
				{
					this.OnDescripcionChanging(value);
					this.SendPropertyChanging();
					this._Descripcion = value;
					this.SendPropertyChanged("Descripcion");
					this.OnDescripcionChanged();
				}
			}
		}
		
		[Association(Name="TipoOrden_OrdenTrabajo", Storage="_OrdenTrabajos", ThisKey="IdTipoOrden", OtherKey="TipoOrden")]
		public EntitySet<OrdenTrabajo> OrdenTrabajos
		{
			get
			{
				return this._OrdenTrabajos;
			}
			set
			{
				this._OrdenTrabajos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrdenTrabajos(OrdenTrabajo entity)
		{
			this.SendPropertyChanging();
			entity.TipoOrden1 = this;
		}
		
		private void detach_OrdenTrabajos(OrdenTrabajo entity)
		{
			this.SendPropertyChanging();
			entity.TipoOrden1 = null;
		}
	}
	
	[Table(Name="dbo.Usuario")]
	public partial class Usuario : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _User;
		
		private string _Password;
		
		private int _PerfilUsuario;
		
		private string _Nombres;
		
		private string _ApellidoPaterno;
		
		private string _ApellidoMaterno;
		
		private string _Email;
		
		private int _Rut;
		
		private string _Telefono;
		
		private bool _Activo;
		
		private EntitySet<Detalle> _Detalles;
		
		private EntityRef<Tecnico> _Tecnico;
		
		private EntitySet<UsuarioPermiso> _UsuarioPermisos;
		
		private EntityRef<Perfil> _Perfil;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserChanging(string value);
    partial void OnUserChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPerfilUsuarioChanging(int value);
    partial void OnPerfilUsuarioChanged();
    partial void OnNombresChanging(string value);
    partial void OnNombresChanged();
    partial void OnApellidoPaternoChanging(string value);
    partial void OnApellidoPaternoChanged();
    partial void OnApellidoMaternoChanging(string value);
    partial void OnApellidoMaternoChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnRutChanging(int value);
    partial void OnRutChanged();
    partial void OnTelefonoChanging(string value);
    partial void OnTelefonoChanged();
    partial void OnActivoChanging(bool value);
    partial void OnActivoChanged();
    #endregion
		
		public Usuario()
		{
			this._Detalles = new EntitySet<Detalle>(new Action<Detalle>(this.attach_Detalles), new Action<Detalle>(this.detach_Detalles));
			this._Tecnico = default(EntityRef<Tecnico>);
			this._UsuarioPermisos = new EntitySet<UsuarioPermiso>(new Action<UsuarioPermiso>(this.attach_UsuarioPermisos), new Action<UsuarioPermiso>(this.detach_UsuarioPermisos));
			this._Perfil = default(EntityRef<Perfil>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="[User]", Storage="_User", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_PerfilUsuario", DbType="Int NOT NULL")]
		public int PerfilUsuario
		{
			get
			{
				return this._PerfilUsuario;
			}
			set
			{
				if ((this._PerfilUsuario != value))
				{
					if (this._Perfil.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPerfilUsuarioChanging(value);
					this.SendPropertyChanging();
					this._PerfilUsuario = value;
					this.SendPropertyChanged("PerfilUsuario");
					this.OnPerfilUsuarioChanged();
				}
			}
		}
		
		[Column(Storage="_Nombres", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Nombres
		{
			get
			{
				return this._Nombres;
			}
			set
			{
				if ((this._Nombres != value))
				{
					this.OnNombresChanging(value);
					this.SendPropertyChanging();
					this._Nombres = value;
					this.SendPropertyChanged("Nombres");
					this.OnNombresChanged();
				}
			}
		}
		
		[Column(Storage="_ApellidoPaterno", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ApellidoPaterno
		{
			get
			{
				return this._ApellidoPaterno;
			}
			set
			{
				if ((this._ApellidoPaterno != value))
				{
					this.OnApellidoPaternoChanging(value);
					this.SendPropertyChanging();
					this._ApellidoPaterno = value;
					this.SendPropertyChanged("ApellidoPaterno");
					this.OnApellidoPaternoChanged();
				}
			}
		}
		
		[Column(Storage="_ApellidoMaterno", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ApellidoMaterno
		{
			get
			{
				return this._ApellidoMaterno;
			}
			set
			{
				if ((this._ApellidoMaterno != value))
				{
					this.OnApellidoMaternoChanging(value);
					this.SendPropertyChanging();
					this._ApellidoMaterno = value;
					this.SendPropertyChanged("ApellidoMaterno");
					this.OnApellidoMaternoChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Rut", DbType="Int NOT NULL")]
		public int Rut
		{
			get
			{
				return this._Rut;
			}
			set
			{
				if ((this._Rut != value))
				{
					this.OnRutChanging(value);
					this.SendPropertyChanging();
					this._Rut = value;
					this.SendPropertyChanged("Rut");
					this.OnRutChanged();
				}
			}
		}
		
		[Column(Storage="_Telefono", DbType="NVarChar(20)")]
		public string Telefono
		{
			get
			{
				return this._Telefono;
			}
			set
			{
				if ((this._Telefono != value))
				{
					this.OnTelefonoChanging(value);
					this.SendPropertyChanging();
					this._Telefono = value;
					this.SendPropertyChanged("Telefono");
					this.OnTelefonoChanged();
				}
			}
		}
		
		[Column(Storage="_Activo", DbType="Bit NOT NULL")]
		public bool Activo
		{
			get
			{
				return this._Activo;
			}
			set
			{
				if ((this._Activo != value))
				{
					this.OnActivoChanging(value);
					this.SendPropertyChanging();
					this._Activo = value;
					this.SendPropertyChanged("Activo");
					this.OnActivoChanged();
				}
			}
		}
		
		[Association(Name="Usuario_Detalle", Storage="_Detalles", ThisKey="Id", OtherKey="IdUsuario")]
		public EntitySet<Detalle> Detalles
		{
			get
			{
				return this._Detalles;
			}
			set
			{
				this._Detalles.Assign(value);
			}
		}
		
		[Association(Name="Usuario_Tecnico", Storage="_Tecnico", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public Tecnico Tecnico
		{
			get
			{
				return this._Tecnico.Entity;
			}
			set
			{
				Tecnico previousValue = this._Tecnico.Entity;
				if (((previousValue != value) 
							|| (this._Tecnico.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tecnico.Entity = null;
						previousValue.Usuario = null;
					}
					this._Tecnico.Entity = value;
					if ((value != null))
					{
						value.Usuario = this;
					}
					this.SendPropertyChanged("Tecnico");
				}
			}
		}
		
		[Association(Name="Usuario_UsuarioPermiso", Storage="_UsuarioPermisos", ThisKey="Id", OtherKey="IdUsuario")]
		public EntitySet<UsuarioPermiso> UsuarioPermisos
		{
			get
			{
				return this._UsuarioPermisos;
			}
			set
			{
				this._UsuarioPermisos.Assign(value);
			}
		}
		
		[Association(Name="Perfil_Usuario", Storage="_Perfil", ThisKey="PerfilUsuario", OtherKey="Id", IsForeignKey=true)]
		public Perfil Perfil
		{
			get
			{
				return this._Perfil.Entity;
			}
			set
			{
				Perfil previousValue = this._Perfil.Entity;
				if (((previousValue != value) 
							|| (this._Perfil.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Perfil.Entity = null;
						previousValue.Usuarios.Remove(this);
					}
					this._Perfil.Entity = value;
					if ((value != null))
					{
						value.Usuarios.Add(this);
						this._PerfilUsuario = value.Id;
					}
					else
					{
						this._PerfilUsuario = default(int);
					}
					this.SendPropertyChanged("Perfil");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Detalles(Detalle entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = this;
		}
		
		private void detach_Detalles(Detalle entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = null;
		}
		
		private void attach_UsuarioPermisos(UsuarioPermiso entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = this;
		}
		
		private void detach_UsuarioPermisos(UsuarioPermiso entity)
		{
			this.SendPropertyChanging();
			entity.Usuario = null;
		}
	}
	
	[Table(Name="dbo.UsuarioPermisos")]
	public partial class UsuarioPermiso : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _IdUsuario;
		
		private System.Nullable<int> _IdPermiso;
		
		private bool _Estado;
		
		private EntityRef<Permiso> _Permiso;
		
		private EntityRef<Usuario> _Usuario;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdUsuarioChanging(int value);
    partial void OnIdUsuarioChanged();
    partial void OnIdPermisoChanging(System.Nullable<int> value);
    partial void OnIdPermisoChanged();
    partial void OnEstadoChanging(bool value);
    partial void OnEstadoChanged();
    #endregion
		
		public UsuarioPermiso()
		{
			this._Permiso = default(EntityRef<Permiso>);
			this._Usuario = default(EntityRef<Usuario>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_IdUsuario", DbType="Int NOT NULL")]
		public int IdUsuario
		{
			get
			{
				return this._IdUsuario;
			}
			set
			{
				if ((this._IdUsuario != value))
				{
					if (this._Usuario.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUsuarioChanging(value);
					this.SendPropertyChanging();
					this._IdUsuario = value;
					this.SendPropertyChanged("IdUsuario");
					this.OnIdUsuarioChanged();
				}
			}
		}
		
		[Column(Storage="_IdPermiso", DbType="Int")]
		public System.Nullable<int> IdPermiso
		{
			get
			{
				return this._IdPermiso;
			}
			set
			{
				if ((this._IdPermiso != value))
				{
					if (this._Permiso.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPermisoChanging(value);
					this.SendPropertyChanging();
					this._IdPermiso = value;
					this.SendPropertyChanged("IdPermiso");
					this.OnIdPermisoChanged();
				}
			}
		}
		
		[Column(Storage="_Estado", DbType="Bit NOT NULL")]
		public bool Estado
		{
			get
			{
				return this._Estado;
			}
			set
			{
				if ((this._Estado != value))
				{
					this.OnEstadoChanging(value);
					this.SendPropertyChanging();
					this._Estado = value;
					this.SendPropertyChanged("Estado");
					this.OnEstadoChanged();
				}
			}
		}
		
		[Association(Name="Permiso_UsuarioPermiso", Storage="_Permiso", ThisKey="IdPermiso", OtherKey="Id", IsForeignKey=true)]
		public Permiso Permiso
		{
			get
			{
				return this._Permiso.Entity;
			}
			set
			{
				Permiso previousValue = this._Permiso.Entity;
				if (((previousValue != value) 
							|| (this._Permiso.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permiso.Entity = null;
						previousValue.UsuarioPermisos.Remove(this);
					}
					this._Permiso.Entity = value;
					if ((value != null))
					{
						value.UsuarioPermisos.Add(this);
						this._IdPermiso = value.Id;
					}
					else
					{
						this._IdPermiso = default(Nullable<int>);
					}
					this.SendPropertyChanged("Permiso");
				}
			}
		}
		
		[Association(Name="Usuario_UsuarioPermiso", Storage="_Usuario", ThisKey="IdUsuario", OtherKey="Id", IsForeignKey=true)]
		public Usuario Usuario
		{
			get
			{
				return this._Usuario.Entity;
			}
			set
			{
				Usuario previousValue = this._Usuario.Entity;
				if (((previousValue != value) 
							|| (this._Usuario.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuario.Entity = null;
						previousValue.UsuarioPermisos.Remove(this);
					}
					this._Usuario.Entity = value;
					if ((value != null))
					{
						value.UsuarioPermisos.Add(this);
						this._IdUsuario = value.Id;
					}
					else
					{
						this._IdUsuario = default(int);
					}
					this.SendPropertyChanged("Usuario");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
